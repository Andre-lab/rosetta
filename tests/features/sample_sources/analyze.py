#!/usr/bin/env python
# :noTabs=true:
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta software suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington CoMotion, email: license@uw.edu.

import glob, re, subprocess, sys, tarfile
from shutil import rmtree, copy
from os import listdir, path, makedirs, getcwd, remove
from optparse import OptionParser

from merge_databases import MergeDatabases

class AnalyzeSampleSources:

    def __init__(self, argv):

        self.initialize_options_parser()
        self.parse_options(argv)



######################################################################
# options parsing functions
#
#
#####################################################################
    def initialize_options_parser(self):
    
        self.parser = OptionParser(usage="Usage: %prog [OPTIONS]")

        self.parser.add_option("--arguments",
          default="../_arguments.py",
          help="A file that contains a python dictionary of variables initialized by the cluster.py scientific benchmark driver script usually generated by the test/scientific/cluster/cluster.py driver script and deposited into test/scientific/cluster/features/ . [default %default]")

    def parse_options(self, argv):

        (options, args) = self.parser.parse_args(args=argv)
    
        self.mvars = None
        try:
            f = open(options.arguments)        
            self.mvars = eval(f.read())
            f.close()
        except:
            print "ERROR: The arguments file, '%s', could no be loaded. This is usually the _arguments.py file generated by the cluster.py scientific benchmark script. The current working directory is '%s'." % (options.arguments, getcwd())

        
        return options


######################################################################
# mvar helper functions
#
#  The mvar variable contains all the configuration information to set
#  up the execution environment for a job. It is initialized by the
#  rosetta_tests/scientific/cluster/cluster.py driver script and then
#  added to durrning the job configuration process.
#  
#
#####################################################################

    def print_mvars(self):
        print "mvars:"
        for key, value in self.mvars.iteritems():
            print "\t%s\t'%s'" % (key.rjust(26), value)


    def get_sample_sources(self):
        if not path.exists(self.mvars["output_dir"]):
            print "ERROR: Output directory '%s' does not exist." % self.mvars["output_dir"]
            exit(1)

        
        sample_sources = []
        for f in listdir(self.mvars["output_dir"]):
            full_f = path.join(self.mvars["output_dir"], f)
            if path.isdir(full_f):
                sample_sources.append(full_f)

        if len(sample_sources) == 0:
            print "ERROR: No sample sources were found in '%s'." % self.mvars["output_dir"]
            exit(1)

        return sample_sources
        
    def database_name_from_sample_source(self, sample_source):
        return path.join(sample_source,
          "features_" + path.split(sample_source)[-1] + ".db3")

    def merge_database_parts(self, database_fname):
        print "Merge database parts together in case the features database was generated on a cluster: '%s'" % database_fname

        parts_fnames = glob.glob(database_fname + "_*")

        if len(parts_fnames) == 0:
            print "ERROR: Unable to locate database parts of the form '%s_*'" % database_fname
            exit(1)
    
        # don't merge journal files
        parts_fnames = [p for p in parts_fnames if p[-7:] != "journal"]

        MergeDatabases(parts_fnames + [database_fname])

        for part in parts_fnames:
            remove(part)

        return database_fname

    def package_database(self, database_fname, target_dir):
        print "Package database into small, compressed chunks"
        print "    database_fname='%s'" % database_fname
        print "    target_dir='%s'" % target_dir


        compressed_database_fname = \
            path.join(target_dir, path.split(database_fname)[-1]) + ".tar.gz"
        compressed_database = tarfile.open(compressed_database_fname, mode='w:gz')
        compressed_database.add(database_fname)
        compressed_database.close()

        p = subprocess.Popen(
            args=["split", "-a", "3", "-b", "10m",
                  compressed_database_fname, compressed_database_fname + "_"])
        p.wait()

        remove(compressed_database_fname)    
        

    def analyze(self):

        self.print_mvars()

        sample_sources = self.get_sample_sources()

        for sample_source in self.get_sample_sources():
            print "processing sample source '%s' with run_type='%s'" % (sample_source, self.mvars["run_type"]) 

            database_fname = self.database_name_from_sample_source(sample_source)

            if self.mvars["run_type"] == "merge":
                self.merge_database_parts(database_fname)

            elif self.mvars["run_type"] == "prepare_for_RosettaTests":
                self.merge_database_parts(database_fname)

                files_dir = path.join(self.mvars["workdir"], "files")
                self.package_database(database_fname, files_dir)
            
            else:
                print "ERROR: Unrecognized run_type: '%s'." % self.mvars["run_type"]
                print "ERROR: Recognized run_types for the analyze action on the features scientific benchmark are ['merge', 'prepare_for_RosettaTests']."
                exit(1)

def main(argv):

    ss = AnalyzeSampleSources(argv)
    ss.analyze()


if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
