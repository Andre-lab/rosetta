#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

#cd %(workdir)s

#[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1

#mpiexec -np 3 %(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @flags -database %(database)s -constant_seed 2>&1 \
#	| egrep -vf ../../ignore_list \
#	> log_db_output

#test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

mpiexec -np 3 rosetta_scripts.mpi.macosclangrelease @flags

# We need to separate out the log files, since the order in which slaves report results will vary.
rm log_0 #The master node logfile will show stocastic changes due to slaves completing in different orders, so don't compare it.
#Logs 1 and 2 should be deterministic EXCEPT for the write times.  Delete this from the logfile:
grep -v 'seconds' log_1 > log_1_noseconds
rm log_1
grep -v 'seconds' log_2 > log_2_noseconds
rm log_2


echo "Total split features dbs: $(ls features_IntegrationTest.db3_* | wc -l)" >> log_db_output

#Merge the Databases
bash ../../../features/sample_sources/merge.sh features_IntegrationTest.db3 features_IntegrationTest.db3_*

#Output text file for diff
if type -P sqlite3 &>/dev/null; then
   sqlite3 features_IntegrationTest.db3 'UPDATE protocols SET svn_url = "";'
   sqlite3 features_IntegrationTest.db3 'UPDATE protocols SET svn_version = "";'
   sqlite3 features_IntegrationTest.db3 '.dump' | egrep -vf ../../ignore_list > features_IntegrationTest.db3.dump 
else
   echo "Please install the sqlite3 command line application to correctly run this test." >> log_db_output
fi
rm -rf features_IntegrationTest.db3
