#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substitution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#   python      the full path to the Python interpreter
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

# making script terminate with error after any command that return non zero exit code
set -e

mkdir output_fa
mkdir output_cen
mkdir output_cenrot
mkdir output_rt

[ -x %(bin)s/restype_converter.%(binext)s ] || exit 1
%(bin)s/restype_converter.%(binext)s %(additional_flags)s @flags -database %(database)s -testing:INTEGRATION_TEST  2>&1 \
    | egrep -vf ../../ignore_list \
    > log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/restype_converter.%(binext)s %(additional_flags)s @flags_cen -database %(database)s -testing:INTEGRATION_TEST  2>&1 \
    | egrep -vf ../../ignore_list \
    > log_cen

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/restype_converter.%(binext)s %(additional_flags)s @flags_cenrot -database %(database)s -testing:INTEGRATION_TEST  2>&1 \
    | egrep -vf ../../ignore_list \
    > log_cenrot

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

# Test round-triping
# This is both to check that the output params files are readable, as well as to make sure they reconsititue properly.
# The auto-capturing of all the output params files is a bit complicated because of the naming of the Glc residue types 

echo "-extra_res_fa " `ls output_fa/*.params` > fa_params_output

%(bin)s/restype_converter.%(binext)s %(additional_flags)s @flags_rt @fa_params_output -database %(database)s -testing:INTEGRATION_TEST  2>&1 \
    | egrep -vf ../../ignore_list \
    > log_rt

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

# The params files should be identical -- use diff to find those which are not.
# We ignore the pdb and sdf files which are only in one directory
# And we ignore whitespace changes, as most of the params file is whitespace insensitive. 
diff -w output_rt/ output_fa/ | grep -v "Only in" | sed "s/^/[`date`] /" > round_trip_issues.txt

