#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1

%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @flags_01 -database %(database)s  2>&1 \
	| egrep -vf ../../ignore_list \
	> log_db_output_01

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @flags_02 -database %(database)s  2>&1 \
	| egrep -vf ../../ignore_list \
	> log_db_output_02

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

full_db="features_IntegrationTest.db3"
part_dbs=${full_db}_*

# this test requires 'bash' not just 'sh':
if type -P sqlite3 &>/dev/null; then

   bash merge.sh $full_db $part_dbs &> log_database_merge

   # strip out information that will cause needless integrationt test failures
   sqlite3 $full_db 'UPDATE protocols SET svn_url = "";'
   sqlite3 $full_db 'UPDATE protocols SET svn_version = "";'
   
   # just consider dumped contents for easier integrationt test comparison
   sqlite3 $full_db '.dump' > $full_db.dump 
   for part_db in $part_dbs
   do
      sqlite3 $part_db '.dump' > $part_db.dump
   done
else
   echo "Please install the sqlite3 command line application to correctly run this test." > log_db_output
fi


rm -rf $full_db $part_dbs

