#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

#check to make sure all relevent executables exist

[ -x %(bin)s/exposed_strand_finder.%(binext)s ] || exit 1
[ -x %(bin)s/homodimer_maker.%(binext)s ] || exit 1
[ -x %(bin)s/homodimer_design.%(binext)s ] || exit 1

#test for exposed_strand_finder
%(bin)s/exposed_strand_finder.%(binext)s @finder_options -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > exposed_strand_finder.log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

#test for homodimer_maker
%(bin)s/homodimer_maker.%(binext)s @maker_options -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > homodimer_maker.log
#remove unneeded output
rm 2a7b_mpm_*_parl*.pdb

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

#test for homodimer_design

#make symmdef if needed will avoid doing this for the integration test but here's the command if you need to do it again
#perl %(minidir)s/src/apps/public/symmetry/make_symmdef_file.pl -m NCS -a A -i B -p 2a7b_mpm_A806_anti_wind_1_step_1.pdb > symmdef

%(bin)s/homodimer_design.%(binext)s @design_options -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > homodimer_design.log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so


