#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

#
# After that, do whatever you want.
# It's nice to test that the executable exists first, to ensure the test actually runs:
#
## [ -x %(bin)s/MY_MINI_PROGRAM.%(binext)s ] || exit 1
#
# Files will be diffed verbatim, so if you want to log output and compare it,
# you'll need to filter out lines that change randomly (e.g. timings).
# Prefixing your tests with "nice" is probably good form as well.
# Don't forget to use -constant_seed -nodelay  so results are reproducible.
# Here's a typical test for a Mini binary, assuming there's a "flags" file
# in this directory too:
#

#kdrew: this test is for all compiled apps, it tests to see if exceptions are being handled properly,
#kdrew: a bogus option is passed in which will throw an exception, if not caught, an 'Abort trap' should appear

#kdrew: test all apps in bin directory with bogus input option
for app in %(bin)s/*.%(binext)s 
do
	app_prefix=$( echo $app | sed 's:.%(binext)s::' | sed 's:/: :g' | awk '{print $NF}')
	eval "$app -nodelay  -bogus_input_option" >> log_${app_prefix} 2>&1 
	if [[ $( grep -i "abort"  log_${app_prefix} | wc -l ) -gt 0 ]]; then
		 guilty=$( git blame --line-porcelain %(bin)s/../src/pilot_apps.src.settings.all | grep -B 12 ${app_prefix} | awk '$1 == "author"' | sed 's:author ::' )
		 echo "Unhandled exceptions in application $app_prefix added by $guilty " $(date) >> log
        fi
        rm log_${app_prefix}
done

if [[ $( wc log | awk '{print $1}' ) -gt 0 ]]; then
   exit 1
fi

#
# Or if you don't care whether the logging output changes:
#
## %(bin)s/MY_MINI_PROGRAM.%(binext)s %(additional_flags)s @flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
##     > /dev/null
#
