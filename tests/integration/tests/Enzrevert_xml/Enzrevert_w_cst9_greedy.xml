#### EnzRevert ####
# Consider only the designed amino acid and the wild-type at each position. E.g. if position 5 was A in native.pdb and S in design.pdb, the algorithm only allows A or S at position 5. Accept best amino acid at each position in a "greedy" fashion. Greedy here means that the best mutation is put in, followed by second best, making sure that they are mutually compatible.

#To be run as the following:

rosetta_scripts.linuxgccrelease -database ~/minirosetta_database -extra_res_fa ligand.params @flags -parser:protocol Enzrevert_w_cst9_greedy.xml -enzdes:cstfile constraints.cst -in:file:native native.pdb -s design.pdb

# changes in cst9: Make soft packing the default for repacking around the mutation.
# changes in cst8: Remove repacking from the greedy opt's relax_mover, as Chris K. indicates that the greedy opt already does sufficient repacking.
		Also clean up some of the logic and improve comments.

#With a flags file:

-run:preserve_header
-score:weights enzdes

-ex1
-ex2
-use_input_sc

-correct
-no_his_his_pairE
-score::hbond_params correct_params
-lj_hbond_hdis 1.75
-lj_hbond_OH_donor_dis 2.6
-use_incorrect_hbond_deriv false
-linmem_ig 10
-nblist_autoupdate true
-chemical:exclude_patches LowerDNA  UpperDNA Cterm_amidation SpecialRotamer VirtualBB ShoveBB VirtualDNAPhosphate VirtualNTerm CTermConnect sc_orbitals pro_hydroxylated_case1 pro_hydroxylated_case2 ser_phosphorylated thr_phosphorylated  tyr_phosphorylated tyr_sulfated lys_dimethylated lys_monomethylated  lys_trimethylated lys_acetylated glu_carboxylated cys_acetylated tyr_diiodinated N_acetylated C_methylamidated MethylatedProteinCterm

# Comments are marked with a "#"

#Note that this script assumes that there is only one protein chain and one ligand. If not, adjust the various jump parameters accordingly

<ROSETTASCRIPTS>
        <TASKOPERATIONS>
                <InitializeFromCommandline name=init/>
		<DetectProteinLigandInterface name=LigInterface cut1=6 cut2=8 cut3=10 cut4=12 design=1 /> Add resfile, if necessary

	# If you don't want a full scan, choose one of the following mutation schemes (add angle brackets as appropriate):
	# (Also remember to add it to the task_operation= parameter of GreedyOptMutationMover.)
	        # To do a simple revert to native:
		<JointSequence name=joint use_current=1 use_native=1 />
		# If you have a PSSM-format MSA for your template
		SeqprofConsensus name=seqprof filename=profile.pssm /
		# If you want to restrict particular identities
                RestrictAbsentCanonicalAAS name=allaa keep_aas="ACDEFGHIKLMNPQRSTVWY"/
	# (Note that more complicated possibilities are possible)

		<SetCatalyticResPackBehavior name="catrespack" fix_catalytic_aa=1 /> Don't allow catalytic residues to mutate
		<RestrictToRepacking name=repack_only /> Don't design when repacking.
        </TASKOPERATIONS>
        <SCOREFXNS>
	        <enzdes weights=enzdes />
	        <soft weights=ligand_soft_rep />
        </SCOREFXNS>
        <FILTERS>
	        <LigInterfaceEnergy name=ddg  scorefxn=enzdes jump_number=1 confidence=0/>
	        #Ddg name=ddg scorefxn=enzdes threshold=0 jump=1 repeats=3 repack=1 confidence=0/
                <ScoreType name=resid scorefxn=enzdes score_type=res_type_constraint threshold=0 confidence=0/>

                <ScoreType name=total_score scorefxn=enzdes score_type=total_score threshold=0 confidence=0/> Also will contain res_type_constraint values

		#Like the revert_design_to_native, allow a small drop in ddg for going back to the native identity
		<CombinedValue name=ddg_res confidence=0>
		  <Add filter_name=ddg factor=1/>
		  <Add filter_name=resid factor=1/>
		</CombinedValue>

		<CombinedValue name=ddg_res_total confidence=0>
		  <Add filter_name=ddg factor=1/>
		  Add filter_name=resid factor=1
		  <Add filter_name=total_score factor=1.0/> Already will contain res_type_constraint
		</CombinedValue>

        </FILTERS>
        <MOVERS>
	        <AddOrRemoveMatchCsts name=addcst cst_instruction=add_new />
                <AddOrRemoveMatchCsts name=cst_readd cst_instruction="add_pregenerated"/>
	        <AddOrRemoveMatchCsts name=cst_remove cst_instruction="remove" keep_covalent=1/>
		<ScoreMover name=score scorefxn=enzdes verbose=0 />
		<PackRotamersMover name=repack scorefxn=score12 task_operations=init,LigInterface,catrespack,repack_only/>
	        #A native residue score bump. IDENTITY with weight of 1 gives -1 to native, 0 to all others
                # Set to give roughtly -0.05 to native and 0 to others, to match the old cst5 behavior, need to test
		<FavorSequenceProfile name=fsp scaling=prob use_native=1 matrix=IDENTITY weight=0.05 scorefxns=enzdes />

		#Sidechain and rigid body minimization only - adjust as appropriate if you want more flexibility
                <TaskAwareMinMover name=min bb=0 chi=1 jump=1 scorefxn=enzdes task_operations=LigInterface/>

   		<ParsedProtocol name=repack_min>
                        <Add mover=repack/>
                        <Add mover=min/>
                </ParsedProtocol>

        	<GreedyOptMutationMover name=greedyscan relax_mover=min filter=total_score task_operations=init,joint,LigInterface,catrespack scorefxn=soft/>
	</MOVERS>
        <APPLY_TO_POSE>
        </APPLY_TO_POSE>
        <PROTOCOLS>
	        <Add mover=addcst/>
	# Remove the following if you don't want to add a bonus for the native identity
	        <Add mover=fsp/>
		<Add mover=greedyscan/>
##### NOCSTREPACK #### comment out this block to get rid of nocst repack  #####
		<Add mover=cst_remove />
		<Add mover=repack_min />
		<Add mover=cst_readd />
##### END_NOCSTREPACK ## ######################################################
		<Add mover=score/>
		<Add filter=ddg/>
        </PROTOCOLS>
</ROSETTASCRIPTS>
