cd %(workdir)s
[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1
[ -x %(bin)s/score_jd2.%(binext)s ] || exit 1

# Look for appropriate building from minimal atoms

%(bin)s/score_jd2.%(binext)s %(additional_flags)s @score_flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > molscore_log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

##Params file version for comparison
#%(bin)s/score_jd2.%(binext)s %(additional_flags)s @score_params_flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
#    | egrep -vf ../../ignore_list \
#    > paramscore_log
#
#test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

# Look for appropriate matching of atoms in read-in PDB

%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @min_flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > min_log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

##Params file version for comparison
#%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @min_params_flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
#    | egrep -vf ../../ignore_list \
#    > min_params_log

# Test how things work in a truncated protocol

%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s @flags -database %(database)s -run:constant_seed -nodelay  2>&1 \
    | egrep -vf ../../ignore_list \
    > log

test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)
