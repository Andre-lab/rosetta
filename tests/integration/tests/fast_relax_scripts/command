#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

# make sure executable exists
if [ ! -x %(bin)s/rosetta_scripts.%(binext)s ]; then
   exit 1
fi

#header
 
echo -e "script\tdualspace\texpected_result\tresult" > log


###########
# DEFAULT #
###########

script="legacy"
dualspace="0"
expected_filename="legacy.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" > subtest1.log 2>&1
filename=`cat subtest1.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi


script="default"
dualspace="0"
expected_filename="MonomerRelax2019.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" > subtest2.log 2>&1
filename=`cat subtest2.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="default"
dualspace="1"
expected_filename="MonomerRelax2019.dualspace.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @custom_sfxn_flags -script_vars script="$script" sfxn="ref2015_cart" dualspace="$dualspace" sfxn="ref2015_cart" > subtest3.log 2>&1
filename=`cat subtest3.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

#beta_nov16 test
script="default"
dualspace="0"
expected_filename="MonomerRelax2019.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" -beta_nov16 > subtest4.log 2>&1
filename=`cat subtest4.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

#beta_nov16 test
script="default"
dualspace="1"
expected_filename="MonomerRelax2019.dualspace.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" -beta_nov16_cart > subtest5.log 2>&1
filename=`cat subtest5.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

###################
# PolarDesign2019 #
###################

script="PolarDesign2019"
dualspace="0"
expected_filename="PolarDesign2019.ref2015.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" > subtest6.log 2>&1
filename=`cat subtest6.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="PolarDesign2019"
dualspace="1"
expected_filename="PolarDesign2019.ref2015.dualspace.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @custom_sfxn_flags -script_vars script="$script" dualspace="$dualspace" sfxn="ref2015_cart" > subtest7.log 2>&1
filename=`cat subtest7.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="PolarDesign2019"
dualspace="0"
expected_filename="PolarDesign2019.beta_nov16.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" -beta_nov16 > subtest8.log 2>&1
filename=`cat subtest8.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="PolarDesign2019"
dualspace="1"
expected_filename="PolarDesign2019.beta_nov16.dualspace.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @flags -script_vars script="$script" dualspace="$dualspace" -beta_nov16_cart > subtest9.log 2>&1
filename=`cat subtest9.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

# OLD SFXNS:

script="PolarDesign2019"
dualspace="0"
expected_filename="PolarDesign2019.talaris2014.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @custom_sfxn_flags -script_vars script="$script" dualspace="$dualspace" sfxn="talaris2014" -corrections::restore_talaris_behavior 1 > subtest10.log 2>&1
filename=`cat subtest10.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="PolarDesign2019"
dualspace="0"
expected_filename="PolarDesign2019.talaris2013.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @custom_sfxn_flags -script_vars script="$script" dualspace="$dualspace" sfxn="talaris2013" -corrections::restore_talaris_behavior 1 > subtest11.log 2>&1
filename=`cat subtest11.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

script="PolarDesign2019"
dualspace="0"
expected_filename="PolarDesign2019.score12.txt"
%(bin)s/rosetta_scripts.%(binext)s %(additional_flags)s -database %(database)s -testing:INTEGRATION_TEST @custom_sfxn_flags -script_vars script="$script" dualspace="$dualspace" sfxn="score12" -restore_pre_talaris_2013_behavior 1 > subtest12.log 2>&1
filename=`cat subtest12.log | grep "Reading script file" | awk '{print $6}' | awk -F/ '{print $NF}' | tail -n1`
echo -e "$script\t$dualspace\t$expected_filename\t$filename" >> log
if [ "$filename" != "$expected_filename" ]; then
    echo "FAIL " `date` >> log
fi

