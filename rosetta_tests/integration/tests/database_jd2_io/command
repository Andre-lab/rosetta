#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1

%(bin)s/rosetta_scripts.%(binext)s @test_output.flags -database %(database)s 2>&1 \
    | egrep -vf ../../ignore_list \
    > test_output.log

%(bin)s/rosetta_scripts.%(binext)s @test_input.flags -database %(database)s 2>&1 \
    | egrep -vf ../../ignore_list \
    > test_input.log


if type -P sqlite3 &>/dev/null; then
   sqlite3 structures.db3 'UPDATE protocols SET svn_url = "";'
   sqlite3 structures.db3 'UPDATE protocols SET svn_version = "";'
   sqlite3 structures.db3 '.dump' > structures.db3.dump
else
   echo "Please install the sqlite3 command line application to correctly run this test."
fi
rm -rf structures.db3


