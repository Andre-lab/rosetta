#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

[ -x %(bin)s/rosetta_scripts.%(binext)s ] || exit 1

[[ %(binext)s =~ postgres ]] || exit 0

echo "DROP SCHEMA %(dbms_pq_schema)s CASCADE;" > log_db_output  2>&1
psql -h %(dbms_host)s -U %(dbms_user)s -p %(dbms_port)s -w -d %(dbms_database_name)s -c "DROP SCHEMA %(dbms_pq_schema)s CASCADE;" >> log_db_output 2>&1

echo "CREATE SCHEMA %(dbms_pq_schema)s;\n" >> log_db_output 2>&1

psql -h %(dbms_host)s -U %(dbms_user)s -p %(dbms_port)s -w -d %(dbms_database_name)s -c "CREATE SCHEMA %(dbms_pq_schema)s;" >> log_db_output 2>&1

%(bin)s/rosetta_scripts.%(binext)s \
	@flags \
	-database %(database)s \
	-dbms:mode postgres \
	-dbms:host %(dbms_host)s \
	-dbms:user %(dbms_user)s \
	-dbms:port %(dbms_port)s \
	-dbms:password \
	-dbms:database_name %(dbms_database_name)s \
	-dbms:pq_schema %(dbms_pq_schema)s \
	-constant_seed 2>&1 \
	| egrep -vf ../../ignore_list \
	>> log_db_output 2>&1


test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so (i.e. Tell testing system if Rosetta died.)

pg_dump -h %(dbms_host)s -U %(dbms_user)s -p %(dbms_port)s -w -n %(dbms_pq_schema)s %(dbms_database_name)s > features_IntegrationTest.sql.dump 2>&1

echo "DROP SCHEMA %(dbms_pq_schema)s CASCADE;\n" >> log_db_output 2>&1 

psql -h %(dbms_host)s -U %(dbms_user)s -p %(dbms_port)s -w -d %(dbms_database_name)s -c "DROP SCHEMA %(dbms_pq_schema)s CASCADE;" 2&>1 >> log_db_output
