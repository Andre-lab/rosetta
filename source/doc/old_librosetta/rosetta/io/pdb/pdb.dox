// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file   rosetta/io/pdb/pdb.dox
/// @brief  Classes used to read and write PDB files.
/// @author Ion Yannopoulos (ion)


/// @namespace rosetta::io::pdb
///
/// @brief     Classes used to read and write PDB files.
///
/// A PDB file is broken up into records, made up of one line each, and
/// identified by a record name in the first six columns.  The different
/// kinds of records are described at:
///
///   http://www.pdb.org/pdb/file_formats/pdb/pdbguide2.2/part_11.html
///
/// Each record is made up of fields belonging to one of sixteen different
/// types.  The different kinds of fields are described at:
///
///   http://www.pdb.org/pdb/file_formats/pdb/pdbguide2.2/part_13.html
///
/// The primary public interface is @c PDBReader, which turns a PDB file
/// into a series of records.  It behaves as an iterator through a
/// PDB file.  PDBReader allows for varying implementations of file readers,
/// which among other things allows for investigating different levels of
/// efficiency.   At this point the only implementation of @c PDBReader is
/// the @c SimplePDBReader_.
///
/// Using a PDBReader looks like this:
///
/// @htmlonly
  <pre><code>
  &#x23;include &lt;rosetta/io/pdb/PDBReader.hh&gt;

  using rosetta::io::pdb::PDBReader;
  using rosetta::io::pdb::PDBReaderOP;
  using rosetta::io::pdb::records::Record;
  using rosetta::io::pdb::records::RecordOP;

  PDBReaderOP reader_p( new <i>&lt;PDBReader implementation&gt;</i>( <i>PDB filename</i> ) );
  PDBReader & reader ( *reader_p );

  while ( reader.more() )
  {
    RecordOP record_p ( reader.read() );
    Record & record ( *record_p );

    // Check the record's type and take appropriate action.
  }
  </code></pre>
@endhtmlonly
///
/// An equivalent @c PDBWriter has not yet been written.


