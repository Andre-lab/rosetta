// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file   rosetta/chemical/chemical.dox
/// @brief  Chemical layer documentation
/// @author Stuart G. Mentzer (Stuart_Mentzer@objexx.com)


/// @namespace rosetta::chemical
///
/// @brief     Chemical state shared as properties by all instances of atoms and
///            molecules.
///
/// The rosetta::chemical namespace holds the purely chemical entity
/// representations used by Rosetta: no positional/conformational
/// properties are included. While conceptually there could be a
/// topological/connectivity graph of the chemical entities in a true
/// chemical layer the lack of a use for such a layer and the implementation
/// complexities that a layer paralleling the conformation representation
/// bring in with C++ (e.g., a Decorator pattern approach brings in
/// virtual/multiple inheritance) caused us to omit this layer. At this
/// point the chemical layer contains just the element and compound atom
/// types.
///
/// How to add a new type of element or compound Atom:
///
/// 1. Add the AtomKey entry for the Atom in AtomKeys.hh/.ii
///
/// 2. Add the entry for that Atom in the PeriodicTable constructor in
///    PeriodicTable.ii/.cc.  Make sure that the same AtomKey is used
///    as the PeriodicTable key and the the first argument to the Atom_
///    constructor.
///
/// @note You can safely add new Atom types in the middle of the lists.
///
/// @note The order of the AtomKey entries in the AtomKeys and PeriodicTable
/// files need not be consistent for program correctness but is a good idea.
