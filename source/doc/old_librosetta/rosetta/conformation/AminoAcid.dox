// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file   rosetta/conformation/AminoAcid.dox
/// @brief  Amino acid documentation
/// @author Frank M. DIppolito (Frank_DIppolito@objexx.com)


/// @class rosetta::conformation::AminoAcid
///
/// @remarks
///
/// The amino acid class was designed to have two separate components: a
/// backbone unit and a sidechain with each component managing its own
/// operations.  Calls to the amino acid interface are forwarded to the
/// respective component.
///
/// There are seven types of backbone units: N terminus, C terminus,
/// NC terminus (for single amino acid proteins), Middle (non terminus)
/// and simple versions of each of the N, C, and NC terminus types.  (A
/// simple version is the same as the nonsimple version, except without
/// the additional H or O atoms that a nonsimple terminus contains.)
/// The backbone unit class hierarchy contains abstract template classes
/// for each type of backbone unit.  Three concrete classes are derived
/// from each of the backbone unit template classes: one for Glycine, one
/// for Proline (because PRO and GLY have distinct behaviors), and one for
/// the other 18 amino acids (the latter is referred to as standard).
///
/// There are 20 types of sidechains, one for each amino acid.
///
/// The split was motivated by the consequence of there being fewer
/// concrete classes ( 7 x 3 + 20 versus 7 x 20 ), less code repetition,
/// and easier code maintenance.  This design has in turn necessitated
/// the creation of special iterators for all the atoms in an amino acid
/// as this is a common operation.  Such an iterator would traverse the
/// backbone unit and sidechain collections, but would minimally affect
/// performance.
