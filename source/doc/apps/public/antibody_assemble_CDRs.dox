// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.
// (C) 199x-2009 University of Washington
// (C) 199x-2009 University of California Santa Cruz
// (C) 199x-2009 University of California San Francisco
// (C) 199x-2009 Johns Hopkins University
// (C) 199x-2009 University of North Carolina, Chapel Hill
// (C) 199x-2009 Vanderbilt University


///@author Jianqing Xu (xubest@gmail.com), Daisuke Kuroda (dkuroda1981@gmail.com), Oana Lungu (olungu@utexas.edu), Jeffrey Gray (jgray@jhu.edu)

/*!

@page antibody_assemble_CDRs Documents for RosettaAntibody3: b). Grafting CDR loops on Antibody Frameework 



@section metadata Metadata

Last edited 4/25/2013.  Corresponding PI Jeffrey Gray (jgray@jhu.edu).

@section code Code and Demo
@li Application source code: 
@verbatim
rosetta/rosetta_source/src/apps/pilot/jianqing/antibody_assemble_CDRs.cc
@endverbatim
@li Main mover source code: 
@verbatim
rosetta/rosetta_source/src/protocols/antibody2/GraftCDRLoopsProtocol.cc
@endverbatim
@li To see demos of some different use cases see integration tests located in 
@verbatim
rosetta/rosetta_tests/integration/antibody_CDR_grafting 
@endverbatim

To run Grafting Protocol, type the following in a command line:
@verbatim
[path to executable]/antibody_assemble_CDRs.[platform|linux/mac][compile|gcc/ixx]release –database [path to database] @options
@endverbatim

Note: these demos will only generate one decoy. 



@section references References

We recommend the following articles for further studies of RosettaDock methodology and applications:
@li J. Xu, D. Kuroda & J. J. Gray, “RosettaAntibody3: Object-Oriented Designed Protocol and Improved Antibody Homology Modeling.” (2013) in preparation
@li A. Sivasubramanian,* A. Sircar,* S. Chaudhury & J. J. Gray, "Toward high-resolution homology modeling of antibody Fv regions and application to antibody-antigen docking,"  Proteins 74(2), 497-514 (2009)


@section purpose Purpose
Graft antibody CDR templates on the framework template to create a rough antibody model.

@section algorithm Algorithm
<ol><li>
The code superimposes the backbone coordinates of 4 residues at each end of CDRs  (each end 4 residues) on the 4 residues on the framework (each end), so the CDRs can be “grafted” on the framework. 
</li><li>
After grafting, the backbone coordinates of 2 residues on the superimposition region were replaced by the superimposed 2 residues on the terminus of the CDR
</li><li>
 The code also minimizes and repacks the entire CDRs (backbone and side chain) after grafting
</li></ol>


@section input Input Files
FR.pdb (framework template) <br>
L1.pdb, L2.pdb, L3.pdb (L chain CDR templates) <br>
H1.pdb, H2.pdb, H3.pdb (H chain CDR templates) <br>

The preparation of these inputs can be found in the @ref antibody_protocol

@section flags Flags

<b>
Example:
</b>
@verbatim
-s FR.pdb
-antibody::graft_l1
-antibody::graft_l2
-antibody::graft_l3
-antibody::graft_h1
-antibody::graft_h2
-antibody::graft_h3
-antibody::h3_no_stem_graft
-antibody::packonly_after_graft
@endverbatim

<b>
Detailed Description of Flags:
</b>
@verbatim
-antibody::graft_l1
-antibody::graft_l2
-antibody::graft_l3
-antibody::graft_h1
-antibody::graft_h2
-antibody::graft_h3
@endverbatim

@li Description: <br>
	specify which CDRs you want to graft 

@li Options: <br>
	true or false


@verbatim
-antibody::h3_no_stem_graft
@endverbatim

@li Description: <br>
	 In the grafting code, after superimposition, coordinates of two stem residues are replaced by the extra residues at each end of CDR template PDB files (L1.pdb, H2.pdb etc.).  Non-H3 CDRs may be OK, but for H3, it may be bad for the purpose of later loop modeling if the stems are changed. This flag will protect the H3 stems. The superimposition step is exactly the same, the only difference is the stems of H3 will not be replaced by the residues on H3 side. So the stem can be original stem on the framework template.

@li Options:
	true or false


@verbatim
-antibody::packonly_after_graft
@endverbatim

@li Description: <br>
	The default of the grafting protocol will do minimization (both side chain and backbone) after CDR grafting. Sometimes the minimization can be tricky, as it can change the structure dramatically,  if the prepared model is in a bad condition. This flag allows user to turn on/off minimization, but packing still default to be conducted.  

@li Options:
	true or false





@section output Expected Outputs
One pdb file with 6 CDR grafted. 

@section new_stuff New things since last release
This is the first public release in Rosetta3

@li Supports the modern job distributor (jd2).
@li Support for \ref constraint_file "constraints".

*/
