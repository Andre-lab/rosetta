// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author DOCUMENTATION AUTHOR GOES HERE
/*!

@page make_symmdef_file Documentation for the Symmetry Definiton file creation script.

@section metadata Metadata
Last edited May 31 2010 by Frank DiMaio.  Code by Frank DiMaio and Ingemar Andre.

@section code_demos Code and Demo
All the code is contained in the Perl script src/apps/public/symmetry/make_symmdef_file.pl.

@section purpose Purpose
This script automatically creates symmetry definition files corresponding to the symmetry in some template PDB.  If the template is not symmetrical it is "symmetrized" by the script.

@limits Limitations
This routine does not create symmetry definition files for ab initio symmetric modeling with fold_and_dock. Use See @ref make_symmdef_file_denovo "make_symmdef_file_denovo" instead.

If the input PDB is very asymmetric, the output PDB may be very far from the input.  Generally this is undesirable; you may want to model this system asymmetrically.

The following symmetry types are currently unsupported by the script:
<ul>
<li> Polar helical symmetries (a D<I>n</I> point group at each helical translation) are not understood by the script </li>
<li> Tetrahedral, octahedral and icosahedral point symmetries may be generated, but asymmetrical variations in the input file will not be "symmetrized" (as with C<I>n</I> and D<I>n</I>)</li>
<li> 2D (wallpaper) symmetry is not created by the script.  A limited number of 2D symmetries may be generated in HELIX mode (see the experimental -c option).
<li> General 3D symmetries are not available in the script.  The CRYST mode assumes a fixed unit cell size; systems where the unit cell size may change are not created by the script.
</ul>

@modes Modes

The script currently recognizes three different symmetry types:  noncrystallographic (point) symmetries, crystallographic symmetry, and helical symmetry.  A fourth (experimental) option, "pseudo-symmetry," models a nonsymmetric system using the symmetry machinery to attempt to reduce the conformational space (and running time) of the search at the cost of some accuracy.

@section ft_options Options
These options are common to all symmetry modes:
@verbatim
    -m (NCS|CRYST|HELIX|PSEUDO) : [default NCS] which symmetric mode to run
            NCS: generate noncrystallographic (point) symmetries from multiple chains in a PDB file
            CRYST: generate crystallographic symmetry (fixed unit cell) from the CRYST1 line in a PDB file
            HELIX: generate helical/fiber symmetry from multiple chains in a PDB file
            PSEUDO: (EXPERIMENTAL) generate pseudo-symmetric system
    -p <string> : Input PDB file (one of -b or -p _must_ be given)
    -r <real>   : [default 10.0] the max CA-CA distance between two interacting chains
    -f          : [default false] enable fast distance checking (recommended for large systems)
@endverbatim

These options are common to noncrystallographic symmetry modes (NCS):
@verbatim
    -a <char>   : [default A] the chain ID of the main chain
    -i <char>   : [default B] the chain IDs of one chain in each symmetric subcomplex
@endverbatim

These options are specific to crystallographic symmetry modes (CRYST):
@verbatim
    -c <real>x6 : override the unit cell parameters in the PDB with these values
    -s <string> : override the spacegroup in the PDB with these values
    -k <real>   : (EXPERIMENTAL) Approximate the protein as a ball of this radius (only if no '-p'!)
@endverbatim

These options are specific to helical symmetry modes (HELIX):
@verbatim
    -a <char>   : [default A] the chain ID of the main chain
    -b <char>   : [default B] the chain ID of the next chain along the fiber/helix
    -i <char>   : the chain ID of a chain in -a's point symmetry group
    -t <real>   : [default 2] the number of helical turns to generate along the -b direction
    -c <char>   : (EXPERIMENTAL) the chain ID of the symm chain perpendicular to the -b chain (simple 2D symmetry)
    -u <real>   : (EXPERIMENTAL) [default 1] the number of repeats to generate along the -c direction
@endverbatim

These options are specific to the (experimental) pseudo symmetry mode (PSEUDO):
@verbatim
    -a <char>   : [default A] the chain ID of the main chain
@endverbatim

@section outputs "Expected Outputs"
<STRONG>NCS mode</STRONG>

A sample command script (to generate D3 symmetry, with chains A, B, and C forming a point group and chains D,E, and F forming a second point group):
@verbatim
make_symmdef_file.pl -m NCS -p D3.pdb -a A -i B E -r 12 > D3.symm
@endverbatim

Several files are generated:
<ul>
<li> <STRONG>D3.symm</STRONG> -- the symmetry definition file to send to Rosetta
<li> D3_symm.pdb -- the symmetrized version of the input file, showing the complete point symmetry group.
<li> D3_model_ABE.pdb -- the same as above, but only showing chains that form an interface (where interface is defined by having a Ca-Ca distance less than 12 (-r 12) A) with chain A
<li> D3_INPUT.pdb -- the input PDB to Rosetta's symmetry modeling.  A single chain in the symmetric complex.
<li> D3.kin -- a KineMage image showing the connectivity of subunits in Rosetta
</ul>


<STRONG>CRYST mode</STRONG>

Sample command script (using the CRYST1 line in the PDB file):
@verbatim
make_symmdef_file.pl -m CRYST -p p65.pdb > p65.symm
@endverbatim

Several files are generated:
<ul>
<li> <STRONG>p65.symm</STRONG> -- the symmetry definition file to send to Rosetta
<li> p65_symm.pdb -- the symmetrized version of the input file, showing the input structure and all crystal contacts.
</ul>

The input PDB (to Rosetta) in this case is simply 'p65.pdb', the input file sent to the script.


<STRONG>HELIX mode</STRONG>

Sample command script (with chains A, C, E, ... tracing up the helical axis and B, D, F, ... forming C2 symmetries up the axis):
@verbatim
make_symmdef_file.pl -m HELIX -p fiber.pdb -a A -b C -i B -r 12 -t 5 > fiber.symm
@endverbatim

Several files are generated:
<ul>
<li> <STRONG>fiber.symm</STRONG> -- the symmetry definition file to send to Rosetta
<li> fiber_symm.pdb -- the symmetrized version of the input file, showing all '-t' turns of the helix
<li> fiber_model_ACB.pdb -- the same as above, but only showing chains that form an interface (where interface is defined by having a Ca-Ca distance less than 12 (-r 12) A) with chain A
<li> fiber_INPUT.pdb -- the input PDB to Rosetta's symmetry modeling.  A single chain in the symmetric complex.
</ul>

A total of 5 turns of the helix (-t 5) are generated.

Alternately, a helical twist can be forced by appending :<I>n</I> to the helical chain.  For example, the command script:
@verbatim
make_symmdef_file.pl -m HELIX -p fiber2.pdb -a A -b B:3 > fiber2.symm
@endverbatim
forces the helix to have 3 subunits per turn.

@section tips Tips
Make sure that the system in *_symm.pdb looks right before submitting a symmetric refinement job!


*/

