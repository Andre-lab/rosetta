// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author Kevin Drew, kdrew@nyu.edu
/*!

@page hbs_design Documentation for the hbs_design application

@section metadata Metadata
Last updated December 7, 2012; 

@section code_demos Code and Demo
@li Application source code: <code>rosetta/rosetta_source/src/apps/public/noncanonical_backbones/hbs_design.cc</code>
@li For a demonstration of a basic run see integration folder (<code>rosetta/rosetta_tests/integration/tests/hbs_design/</code>) and demo folder (<code>rosetta/rosetta_demos/hbs_design</code>). <br>

@section hbs_design References
The main references for the hbs_design app are to be published in the PlosOne 2013 Rosetta Special Collection

@section purpose Purpose
Hydrogen bond surrogates (HBS) are stabilized alpha helices. The first hydrogen bond is replaced by a covalent linker.   Many protein interaction interfaces involve helices and there is interest in using hbs for protein interaction inhibitors.  The rational design of hbs using the hbs_design app attempts to find high affinity binders to target proteins.

@section algorithm Algorithm
1. Pertubation phase: rigid body movement of hbs wrt target
<br>
2. Design phase: design user specified residues on hbs scaffold and minimize
<br>
3. Repeat 10x


@section inputs Input Files

hbs_design requires the following inputs:

@li <b>Starting structure:</b><br>
 The starting structure should have two chains, where the first should be the target protein and the second the hbs scaffold (see demo inputs for example).  The starting conformation should be close to a plausible binding mode because the hbs_design app does not do large pertubations.  The starting structure should also be refined prior to input where the recommended procedure is to do relax with constraints (reference).  


@section hbs_design_options Options

@subsection hbs_design_flags I. Common hbs_design flags:

<div class="fragment"><pre class="fragment">
<table border=1 cellspacing=0 cellpadding=0>
  <tr>
	<td width=213>
   <b>Flag</span></b></p>
   </td>
   <td width=120>
   <b>Description</span></b></p>
   </td>
   <td width=99>
   <b>Type</b></p>
   </td>
   <td width=104>
   <b>Default</span></b></p>
   </td>
  </tr>
 <tr><td>
   -hbs_design_positions
  </td>
 <td>
  positions on hbs chain to be designed
  </td>
 <td>
   list of numbers [ex. 1 2 3 6]
  </td>
 <td>
 	None, only repack, no design
  </td>
</tr>
<tr><td>
 -pert_num
 </td>
  <td>
  number of pertubations made during pertubation phase
  </td>
 <td>
   integer
  </td>
  <td>
  10
  </td>
 </tr>
<tr><td>
 -design_loop_num
 </td>
 <td>
  number of pertubation + design cycles
 </td>
 <td>
  integer
 </td>
 <td>
   10
 </td>
 </tr>
</table>
</pre></div>

@subsection commonRosettaFlags II. Relevant Common Rosetta flags

More information on common Rosetta flags can be found in the <A href="https://www.rosettacommons.org/manuals/rosetta3_user_guide">relevant rosetta manual pages</A>). In particular, flags related to the job-distributor (jd2), scoring function, constraint files and packing resfiles are identical to those in any other Rosetta protocol).

<div class="fragment"><pre class="fragment">
<table border=1 cellspacing=0 cellpadding=0>
			<TR VALIGN=TOP>
				<TD>
 				<B>Flag</B>
				</TD>
				<TD>
					<B>Description</B>
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-in\::file\::s
          <br>
          Or
          <br>
					-in:file:silent
				</TD>
				<TD>
					Specify starting structure
					(in\::file\::s for PDB format, in:file:silent for silent file
					format).
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-in\::file\::silent_struct_type  <BR>
          -out\::file\::silent_struct_type
				</TD>
				<TD>
					Format of silent file to be read
					in/out. For silent output, use the binary file type since
					other types may not support ideal form
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-nstruct
				</TD>
				<TD>
					Number of models to create in the
					simulation
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-use_input_sc
				</TD>
				<TD>
					Include rotamer conformations from the input structure
          during side-chain repacking. Unlike the -unboundrot flag,
					not all rotamers from the input structure are added each
					time to the rotamer library, only those conformations accepted
					at the end of each round are kept and the remaining
					conformations are lost.
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-ex1/-ex1aro -ex2/-ex2aro -ex3 -ex4
				</TD>
				<TD>
					Adding extra side-chain rotamers
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-database
				</TD>
				<TD>
					The Rosetta database
				</TD>
			</TR>
			<TR VALIGN=TOP>
				<TD>
					-include_patches
				</TD>
				<TD>
					Turn on patch files which are off by default.  Turning on patches/hbs_pre.txt and patches/hbs_post.txt is a requirement for hbs applications.	
				</TD>
			</TR>
     </TR>

	</TABLE>
</pre></div>

@section tips Tips

@subsection examples Example runs

<li> generate 1000 (or more) models

\verbatim
 hbs_design.{ext}
-database ${rosetta_db} -include_patches patches/hbs_pre.txt patches/hbs_post.txt -s start.pdb -nstruct 1000 -hbs_design_positions 1 2 3 4 -pert_num 100 -design_loop_num 10
\endverbatim

<li> Sort models by total score, take top 5%, sort by REPACK_ENERGY_DIFF.  Inspect top models.  

</ol>

@subsection hbs_design_limitations Limitations:

@li <b> Start with good binding mode: </b> <br>
This application does not do large pertubations and therefore only minimally explores the space around the input structure.  Use experimental evidience, a full docking app or estimate the binding mode by hotspot residues of native complex.  

@li <b> Target model: </b><br>
This application assumes the backbone of the target structure is in a fixed conformation and does not do flexible backbone moves.

@li <b> Typical running time:</b><br>
With default settings and a typical input structure (~ 100 residues), a single model is estimated around 15 seconds. For a recommended 1000x models, the runtime should be around < 25 mins.   

@li <b> Multichain receptors:</b><br>
This app currently supports only the use of single-chain targets.  If you want to use a multichain target, you may be able to get away with hacking your input PDB to re-label all target chains as one big chain (removing termini atoms and TER cards).  Renumbering is necessary only to resolve numbering conflicts.

@section hbs_design_outputs Expected Outputs

The output of a hbs_design run is a score file (score.sc by default) and k model structures (as specified by the -nstruct flag and the other common Rosetta input and output flags). The score of each model is the second column of the score file. 


@section postprocess Post Processing

Model selection should be made based on sorting by total score, take top 5% and sort by REPACK_ENERGY_DIFF in the score file.

*/
