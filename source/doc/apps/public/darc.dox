// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author Ragul Gowthaman and Karen R. Khar
/*!

@page darc documentation for small molecule docking in protein pockets

@section metadata Metadata
last updated: 1-19-2013

@section Purpose
The objective of this application is to dock a small molecule in a protein pocket and score it’s steric fit.

@section Table of Contents
Overview
Relevant Literature
Required Input files
Optional Input files 
Running the Application

@section Overview
Docking Approach using Ray Casting (DARC) is a computational, structure-based, rigid-body method of docking a small molecule in a protein pocket. The following describes the steps that DARC undergoes when docking a small molecule.

The first step in docking is defining a pocket on the protein. A pdb file of the protein and a residue number that is in the center of the pocket are used to generate a grid centered at the residue. Grid points are defined as protein or solvent. Then pocket shell points are defined as solvent grid points that are proximal to protein grid points.

The second step is defining rays. Rays are cast from a point deep within the protein through the shell points. This is a time consuming step, so when repeatedly using one pocket it is best to use the app, create_rays_file, to create a file with ray coordinates that can be used with DARC to load the rays swiftly allowing you to skip step one and two.

The third step is to load the ligand files and set up Particle Swarm Optimization (PSO). DARC requires a pdb of a small molecule and a parameters file. How to obtain or create these files is descibed later in this documentation. PSO treats one orientation of a small molecule in a pocket as a “particle”. By default, DARC sets up 200 particles. The beginning orientations have the particle’s center of mass at the pocket’s center of mass at random. Each particle is scored based on it’s orientation in the pocket in terms of how it interacts with the rays.

The fourth step is to minimize the DARC score by PSO. After every iteration of PSO, the particles are moved by rotation and translation based on their scores. By default this is done 200 times and the lowest scoring particle is the final docked pose.

@section Relevant Literature
Gowthaman R, Miller S, Johnson D, Karanicolas J (manuscript in preparation) A ray-casting approach to virtual screening leads to compounds active against Mcl-1.

@section Required Input files
Running DARC requires a pdb of the protein or a ray file can be generated as described in optional tools and input files.

DARC requires a pdb of the small molecule. You can obtain a SMILES format of a molecule from the ZINC database of commercially available small molecules. To create a pdb file with # conformers of the molecule, obtain OMEGA2 from OPENEYE and use the following command:

$ OpenEye/bin/omega2  in molecule.smi –out molecules.pdb –maxconfs #conformers
The pdb with multiple conformers can be split into single conformer files with babel as follows:

$ babel –ipdb molecule.pdb –opdb molecule.sdf
DARC also requires a parameters file for the molecule which can be generated as follows:

$ rosetta_source/src/apps/maolfile_to_params.py –c –nKHR –pmol molecule.sdf

@section Optional Input files
DARC may be run with a rays file instead of using the pdb of the protein. It is highly recommended to do this if repeatedly using the same pocket. A rays file can be generated with the app called create_rays_file using the pdb of the protein and the residue number in the center of the pocket with the following command:

$ create_rays_files.linuxgccrelease –input_protein_file proteinID.pdb –central_relax_pdb_num residue#

Use the following command to run DARC with a ray file instead of a protein pdb:

$ darc.linuxgccrelease –input_protein_file 2YXJ.pdb –input_ligand_file molecule.pdb –extra_res_fa molecule.params –gpu 0 –eggshell_triplet rays.txt

DARC can be run significantly faster by enabling GPU processing. You must have OpenCL on your computer and you must build rosetta with extras=opencl:

$ scons mode=release extras=opencl bin

When running DARC with the GPU use the flag –gpu 1 as follows:

$ darc.opencl.linuxgccrelease –input_protein_file 2YXJ.pdb –input_ligand_file molecule.pdb –extra_res_fa molecule.params –gpu 1 –eggshell_triplet rays.txt

@section Running the Application
Default number of particles is 200, but can be defined with the flag –num_particles #. 
Default number of iterations is 200, but can be defined with the flag –num_runs #.
To create print a pdb file with just the pocket points, use flag –print_pocket.
DARC has default weights to score a ray for when the molecule has a steric clash, hits a ray outside the pocket, or for a ray that doesn’t hit the molecule, but the weights can be defined with the flags -steric_weight #, -extra_point_weight #, or -missing_point_weight # respectivelly.



