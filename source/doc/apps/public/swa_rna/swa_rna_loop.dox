// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author Parin Sripakdeevong, Rhiju Das
/*!

@page swa_rna_loop Documentation for RNA loop modeling (lock-and-key problem) with Stepwise Assembly, using <em>swa_rna_main</em> and <em>swa_rna_util</em> executables

@section metadata Metadata
March 2012 by Parin Sripakdeevong (sripakpa [at] stanford.edu) and Rhiju Das (rhiju [at] stanford.edu).

@section code_demos Code and Demo
This code builds single-stranded RNA loops using a deterministic, enumerative sampling method called Stepwise Assembly. A demo example for building the first (5' most) nucleotide of a 6-nucleotide loop is given in <code>rosetta/demos/public/SWA_RNA_Loop/</code>. The same protocol can then be recursively applied to build the remaining nucleotides in the loop, one individual nucleotide at a time.

(Note: the Stepwise Assembly method constructs full-length RNA loops through the recursive building of each individual RNA nucleotides over multiple steps. The enumerative nature of the method makes the full-calculation computationally expensive, requiring for example 15,000 CPU hours to build a single 6-nucleotide RNA loop. While this full-calculation is now feasible on a high-performance computer clusters, perform the full-calculation in the demo would be too excessive.)

The central codes are located in the <code>src/protocols/swa_rna/</code> folder. The applications are in <em>apps/public/swa_rna_main</em> and <em>apps/public/swa_rna_util</em>


@section refs References
Sripakdeevong,	P., Kladwang, W. & Das, R. (2012), “An enumerative stepwise ansatz enables atomic-accuracy RNA loop modeling”, Proc Natl Acad Sci USA. doi:10.1073/pnas.1106516108

@section purpose Purpose and Algorithm
This method builds single-stranded RNA loops using a deterministic, enumerative sampling method called Stepwise Assembly. The modeling situation considered here is the lock-and-key problem. Given a template PDB that contains nucleotides surrounding a missing RNA loop, the Stepwise Assembly method finds the loop conformation (the key) that best fits the surrounding structure (the lock).


@section limits Limitations
@li The enumerative nature of the method makes the full-calculation quite computationally expensive, requiring for example 15,000 CPU hours to build a single 6-nucleotides RNA loop. Is is therfore infeasible to perform the full-calculation on a single desktop/laptop computer. Instead the full-calculation is feasible only on a high-performance computer clusters.

@li The missing RNA loop needs to be single-stranded. The longest loop succesfully tested thus far is 10 nucleotides in length (see referenced paper for details).

@li Currently, the method only optimize the conformation of the missing RNA loop. The coordinates of the surrounding nucleotides inherited from @ref template_PDB are fixed during the entire modeling process.

@li Due to memory limitations, the full-length structure should not exceed 100 nucleotides [this includes the surrounding nucleotides inherited from @ref template_PDB].

@section modes Modes
There is only one mode to run SWA_RNA_Loop at present.

@section inputs Input Files
@subsection required Required file
You need two files:

@anchor template_PDB
@li The @ref template_PDB file: A PDB file containing the coordinates of surrounding nucleotides in the vicinity of the missing RNA loop to be build. We recommend including all surrounding nucleotides within a 10-Angstrom vicinity of the missing RNA loop. An example is available at rosetta/demos/SWA_RNA_loop/rosetta_inputs/template.pdb. Supplied PDB file must be in Rosetta RNA PDB format (see @ref Note on PDB format for RNA).


@li The @ref fasta file: this is the sequence file of the full-length RNA. The fasta file has the RNA name on the first line (after >), and the sequence on the second line. Valid letters are a, c, g and u. An example fasta file is available at rosetta/demos/SWA_RNA_loop/rosetta_inputs/fasta.

@subsection Optional additional files:
@li The native_PDB file: A PDB file containing the 'native' crystallographic or NMR structure. This PDB file should contain the coordinates of the coordinates of the native loop nucleotides plus the surrounding nucleotides inherited from @ref template_PDB. The supplied native_PDB file is not used to guide the modeling process and only used for reporting the RMSD of the generated rosetta models to the native loop. An example is available at rosetta/demos/SWA_RNA_loop/rosetta_inputs/native.pdb. Supplied PDB file must be in Rosetta RNA PDB format (see @ref Note on PDB format for RNA).

@section pre_process Preprocessing of input files

Input PDB file can be converted into the Rosetta RNA PDB format using the following command:

@verbatim
	rosetta/tools/SWA_RNA_python/SWA_dagman_python/misc/SWA_make_rna_rosetta_ready.py IN_PDB.pdb -output_pdb OUT_PDB.pdb
@endverbatim

Replace 'IN_PDB.pdb' with your input PDB filename. Replace 'OUT_PDB.pdb' with the filename you want the converted PDB to be outputted to.

@section how_to_run_the_job How to run the job


The SWA_RNA_python package located at rosetta/tools/SWA_RNA_python/ contains the scripts necessary to setup and run the Stepwise Assembly protocol. Instructions are provided in steps 1)-4) below:

1) Specify the location of the rosetta bin folder and rosetta database folder by editing  your .bashrc or .bash_profile with a line like:

@verbatim
export ROSETTA='~/rosetta/'
@endverbatim

2) Add the SWA_RNA_python package location to the PYTHON path. For bash shell users, the location can be directly added to the ~/.bashrc file:

@verbatim
	export PYTHONPATH=$PYTHONPATH:~/rosetta/tools/SWA_RNA_python/
@endverbatim

3) After the paths are correctly specified, the following command is used to setup everything needed run the Stepwise Assembly job:

@verbatim
	rosetta/tools/SWA_RNA_python/SWA_dagman_python/SWA_DAG/setup_SWA_RNA_dag_job_files.py -s template.pdb -fasta fasta -sample_res 3-8 -single_stranded_loop_mode True -local_demo True -native_pdb native.pdb
@endverbatim

@verbatim
	The "-s" flag specifies the template_PDB file
	The "-fasta" flag specifies the @ref fasta file
	The "-sample_res" flag specifies the sequence number of nucleotides in the missing loop. For example, 3-8 means that the missing loop nucleotides are located at sequence position 3 4 5 6 7 and 8.
	The "-single_stranded_loop_mode" flag specifies that the job involve modeling a single-stranded loop (i.e. the lock-and-key problem).
	The "-local_demo" flag indicate that this is demo to be run on a local laptop or desktop. The calculation perform here is to only build the first (5' most) nucleotide of the 6-nucleotides RNA loop.
	The "-native_pdb" flag specifies the native_PDB file and is optional.
@endverbatim

4) Type "source LOCAL_DEMO" to execute the Rosetta protocol.

The provided instruction will allow the user to build the first (5' most) nucleotide of a N-nucleotide loop. As previously stated, the full-calculation to build full-length RNA loops is quite computationally expensive and is beyond the scope of this documentation. The SWA_RNA_python package is, however, equipped to run this recursive full-calculation on a high-performance computer clusters. The package utilize concept familiar from the Map/Reduce Direct Acyclic Graph framework to order the calculation steps and allocate resources to recursive build the full-length RNA loop over multiple steps, one individual RNA nucleotide at a time. If any user is interested, please contact Parin Sripakdeevong (sripakpa [at] stanford.edu) and we will be happy to provide additional instructions.


@section outputs Expected Outputs

The expected outputs are two silent_files:

@verbatim
	A) region_0_1_sample.out: This silent_file contain 108 structures, corresponding to the 108 lowest energy conformations.
	B) region_0_1_sample.cluster.out: Same as A) but after clustering of the models to remove redundant conformations.
@endverbatim

@section post_process Post Processing

In both silent_files, the total energy score is found under the 'score' column. If the "native_pdb" flag was included, then the RMSD (in angstrom units) between the native_pdb and each Rosetta model is found under the 'NAT_rmsd' column.

Finally, use the following command to extract the top 5 energy cluster centers:

@verbatim
	rosetta/tools/SWA_RNA_python/SWA_dagman_python/misc/SWA_extract_pdb.py -tag S_0 S_1 S_2 S_3 S_4  -silent_file region_0_1_sample.cluster.out
@endverbatim

After running the command, the extracted PDB files should appear in the pose_region_0_1_sample.cluster.out/ subfolder.


@section rna_new_stuff New things since last release
This application is new as of Rosetta 3.4.


*/
