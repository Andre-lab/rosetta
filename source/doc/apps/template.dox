// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author DOCUMENTATION AUTHOR GOES HERE
/*!

@page AppName Documentation for AppName application
AppName should match the C++ application if applicable.  If the document is an extension of a particular app, the c++ application should be within AppName (fixbb vs fixbb_with_hpatch)

@section metadata Metadata
State when the documentation was last updated, by whom. State the PI for this application and their email address.  They are the corresponding author.

@section code_demos Code and Demo
Put where the code's application is, where its major protocol Mover is (if applicable), and where the integration tests and/or demos are.  Your demo should be set up as a fast-running "try me" version, and this documentation should contain instructions for more serious 'production' runs.

@section refs References
Note references associated with this publication.  Also note if they contain implementation details that function as documentation.

@section purpose Purpose
What is this code supposed to do?  What sorts of problems does it solve?

@section algorithm Algorithm
Broadly, how does this code work?  Does it have a centroid phase?  A fullatom phase?  Does it run repacking every so often?

@limits Limitations
What does this code NOT do?  You'll find a lot of academic users try to get code to do things it was never intended to do, warn them off here.

@modes Modes
If your protocol is a massive multimodal beast (loop modeling, etc), then describe the different modes here. All sections below this should be split for each mode as necessary.  You may have only one major mode (fixbb).

@section inputs Input Files
If there are any special input file types, describe them here.
@li Common file types (loop file, fragment files, etc) will be described in a common place; link to those documents with the ATref command.
@li Uncommon and app-specific file types should be described here.
@li Link to (or at least give paths to) examples of each from your integration test/demo.
@li Mention what you expect the input structure to be: if it's loop modeling, does the loop need to be present, or will it build from scratch?  If it's ligand binding, does there need to be a copy of the ligand in the input structure?

@section ft_options Options
Describe the options your protocol uses.
@li First, describe protocol-specific options, in deep detail.  Give the value ranges used in 'production' runs for publication, and recommended minima/maxima where possible.
@li Next, describe the application's general-Rosetta options of particular interest.  Less detail is necessary for options like nstruct, but be sure to mention all the important ones.

@section tips Tips
Describe how to get the best use out of the protocol.  Does it not require constraints, but work better with them?  Do you need to remember -ex1 -ex2 to get much out of it?

@section outputs Expected Outputs
What does your protocol produce?  Usually it will be just a PDB and a scorefile, but note if there should be more.  Note what the normal exit status of the protocol is (for example, "You'll see the jd2 x jobs completed in y seconds message if successfully completed".)

@section postprocess Post Processing
What post processing steps are typical?  Are score vs RMSD plots useful?  Are structures clustered (if so, give a command line)?  Is it obvious when either the application has succeeded or if it has failed (e.g. if the protocol makes predictions like "This is the docked conformation of proteins A and B").  In the case of designs, how should designs be selected?

@section new_stuff New things since last release
If you've made improvements, note them here.

*/
