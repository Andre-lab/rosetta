// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.


/*!
@page build Build Rosetta
For most of the following build commands you need to be in the home directory of Rosetta source.

@section general General Instruction

In order to build a release version of Rosetta executables, simply run scons:

@li Release Mode
This command will build the defaults: libraries devel, protocols, core, numeric, utility and all applications listed in src/apps.src.settings or src/pilot_apps.src.settings.all.
@verbatim
scons bin mode=release
@endverbatim

@li Debug Mode
In order to build a debug version of executables, remove the flag 'mode=release'.
@verbatim
scons bin
@endverbatim

@li Other options
To display more rosetta specific build options call
@verbatim
scons -h
@endverbatim
To display general scons build options call
@verbatim
scons -H
@endverbatim

@section advance Advanced Build Environment Setup

Automatic location of other compilers (assuming they are already in your path) such as Intel C/C++ may be enabled by uncommenting the "program_path"
line in 'tools/build/user.settings'.

You can restrict compilation of the the devel and pilot_apps to build personal applications. On issuing the call
@verbatim
scons bin my
or
scons bin my_pilot_apps
@endverbatim

SCons will read from src/devel.src.settings.my and src/pilot_apps.src.settings.my rather than src/devel.src.settings and src/pilot_apps.src.settings.all.

@section others Common build calls that may be useful

@li Build the default projects with default settings (debug mode, shared libs)
@verbatim
  scons
@endverbatim
@li Build the target <project> with default settings
@verbatim
  scons <project>
@endverbatim
@li Build only the sources of <project> in <subdirectory>
@verbatim
  scons <project>/<subdirectory>
@endverbatim
@li Build only specified objectfile
@verbatim
  scons <project>/<path/<objectfile>
@endverbatim
@li Build and install executables in bin directory
@verbatim
  scons bin
@endverbatim
@li Build and install executables in bin directory if current working directory is a sub-directory of Rosetta. -D option tells SCons to iteratively search towards
the root for SConstruct	file. The # sign is an alias for the top build directory.
@verbatim
  scons -D #bin
@endverbatim
@li Build all pilot_apps listed in src/pilot_apps.src.settings.all and sources in src/devel.src.settings as well as the core, numeric and utility libraries
@verbatim
  scons bin
  scons bin pilot_apps_all
@endverbatim
@li Build restricted set of pilot_apps and devel sources listed in src/pilot_apps.src.settings.my and src/devel.src.settings.my
@verbatim
  scons bin my
  scons bin my_pilot_apps
@endverbatim
@li  Build and install a particular executable in the bin directory e.g
@verbatim
  scons bin/exec
  scons bin/benchmark.linuxgccdebug
  scons mode=release bin/benchmark.linuxgccrelease
@endverbatim
@li Build in release mode(around 10 times faster executable)
@verbatim
  scons mode=release
@endverbatim
@li Static linking instead of shared libraries (portable to other computers, but larger file sizes)
@verbatim
  scons extras=static
@endverbatim
@li Build and run unit tests. (Note the sources must be built with debug mode first.)
@verbatim
  scons cat=test
  python test/run.py
@endverbatim
@li Parallelize build into 3 threads.  Intended for multiprocessor machines.
@verbatim
   scons -j3
@endverbatim


@section mac_build Build Rosetta on Mac OS X System
@subsection terminal_build Build Rosetta in Mac Terminals
The Rosetta installation on MacOS X system is the same as the installation on Linux system. You need to make sure that the Xcode is installed, which is also available free from Apple Developer Connection. http://en.wikipedia.org/wiki/Apple_Developer_Connection

@subsection xcode_build Build Rosetta using the Rosetta Xcode Project
The Rosetta Xcode project is compatible with Xcode versions 2.4 and later. You can use it to build, run, debug, browse, and edit the source code. There are four build targets to select from:
@verbatim
Libraries: Rosetta libraries upon which apps are based
Test: Unit tests for components of Rosetta Libraries & Test: Both of the above
Libraries & Apps: Libraries and executable apps in rosetta-X.X/rosetta_source/bin
@endverbatim
There are two primary configurations, Debug and Release. Each of those has two sub-configurations. The "static" mode builds static binaries, instead of those based on the shared libraries. This can be useful for copying and running the apps on other Mac OS X systems. The "graphics" mode enables OpenGL graphics for those apps that support it.

The Xcode build and clean commands tell scons to take the appropriate actions. Xcode will by default instruct scons to use 2 processors for compilation. To change that number, double click the "Rosetta" icon in the "Groups & Files" pane. Then switch to the "Build" tab and change the "NUM_PROCESSORS" setting to the desired number of processors.


To run/debug Rosetta from within Xcode, you will need to add an executable to the project. To do so, select "New Custom Executable..." from the "Project" menu. Xcode will not allow you to specify the symbolic links in the @code rosetta-X.X/rosetta_source/bin @endcode directory as the executable. Instead, you will have to reference the actual binaries deep inside the subdirectories of @code rosetta-X.X/rosetta_source/build @endcode. Please see the Xcode documentation for information about specifying the command line arguments and the working directory.

@section win_build Build Rosetta on Windows System
- We recommend users to use cygwin for windows to install and run Rosetta. For detals about cygwin, please check http://www.cygwin.com/

If you want to set breakpoints from within Xcode for debugging, you have to tell the debugger to load all user libraries. To do so, go to the "Run->Show->Shared Libraries..." menu item. Change the "User Libraries:" popup from "Default (External)" to "All".
*/

