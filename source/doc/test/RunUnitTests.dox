// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.
// (C) 199x-2009 University of Washington
// (C) 199x-2009 University of California Santa Cruz
// (C) 199x-2009 University of California San Francisco
// (C) 199x-2009 Johns Hopkins University
// (C) 199x-2009 University of North Carolina, Chapel Hill
// (C) 199x-2009 Vanderbilt University

/*!
@page RunUnitTest Different way to run unit tests.

@section metadata Metadata
Last edited 10/10/10. Matthew O'Meara mattjomeara@gmail.com



There is two option to run unit test:
@li Run all unit test suits at once.
@li Run individual test suit.
@li Run individual unit test.

@section run_all Run all unit test suits at once.
  This is the preferred method for running the Unit Tests before committing changes to Rosetta.  To do this,
@verbatim
python test/run.py <optional command line args>
@endverbatim

Important optional command line arguments include:
@li <b>-d, --database</b> Specifies the path to the rosetta_database.

@li <b>-j, --jobs</b> Specifies the number of jobs (unit tests) to run
simultaneously.  For example if the machine has 8 cores use -j 8 to
have maximum performance.

@li <b>--mode</b> Specifies which 'mode' (eg. debug, release) to pass to scons to identify platform path.

@li <b>--extras</b> Specifies which 'extras' settings to pass to scons to identify platform path.

@li <b>-c, --compiler</b> Specifies which 'compiler' setting to pass to scons to identify platform path.

@li <b>--mute</b> Specifies which tracer channels to mute.

@li <b>--unmute</b> Specifies which tracer channels to unmute.

@li <b>-1, --one</b> Specifies to run just one unit test or test suite.


Currently run script execute following tests: apps, core, demo, devel, numeric, ObjexxFCL, protocols and utility.


@section run_one_test Run A Single Unit Test or Test Suite

This method is useful if you working on unit test debugging, and want
to save time by skipping some tests.  To run all tests from a single
test suite, use the <code>--one</code> option to
<code>test/run.py</code>.

Sometimes it is necessary to run a test by hand.  To do this, you need
first to locate it executable. Currently all quilted unit test
executable located in: build/test/... directory, executable files
named by adding .test to the unit test suite name. Note: path may vary
depending on platform you working on, for example for 32 bit Linux
compiled with gcc it will be: 'build/test/debug/linux/2.6/32/x86/gcc'.

 Test executable should be running from the build directory, this is
important since some unit test will try to locate additional files
needed using relative path. Example of command to run only core test executable:

<code>
cd build/test/debug/linux/2.6/32/x86/gcc

./core.test --database ~/rosetta_database --mute core
</code>

If you want to run only one test or just one suite - you will need to
supply name of the test function or name of the suite as a *first*
argument to the test executable. Here the example of running only
test_simple_min and suite MyTestSuite from core tests:

<code>
cd build/test/debug/linux/2.6/32/x86/gcc

./core.test test_simple_min --database ~/rosetta_database --mute core
</code>

<code>
cd build/test/debug/linux/2.6/32/x86/gcc

./core.test MyTestSuite --database ~/rosetta_database --mute core
</code>

*/

