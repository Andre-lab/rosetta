// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/*!

@page preparing_ligands How to Prepare Ligands for use in Rosetta

@author Sam DeLuca

@section why_prep_ligands Why is this process necessary?
Rosetta uses Params files to store precomputed infromation about the geometry and chemistry of residues and ligands.  A params file is required for each residue encountered in a PDB.  A set of params files for commonly seen residues and metals is included with rosetta, and can be found in rosetta_database/chemical/residue_type_sets

@section params_files An overview of params files
Params files store a variety of chemical and geometric information.  The following lines are typically found in Ligand params files.  This does not represent a complete documentation of the params fileformat.  These files are read in core/chemical/residue_io.cc

@li <b>NAME</b>
The 3 letter name of the Residue. Must be unique among all residues loaded into Rosetta

@li <b>IO_STRING</b>
The 3 letter and 1 letter codes representing the residue.  3 letter code is the same as NAME, 1 letter code is Z by default.

@li <b>TYPE</b>
The type of residue being represented, should be 'LIGAND' for ligands, or 'POLYMER' for protein or DNA residues

@li <b>AA</b>
The amino acid type.  Should be "UNK" for ligands

@li <b>ATOM</b>
The PDB atom name, Rosetta AtomType, MM AtomType, and charge. an atom line looks like this:
@verbatim
ATOM  C17 CH1   X   0.13
@endverbatim 
Where C17 is the PDB atom name, CH1 is the Rosetta AtomType, X is the MM AtomType, and 0.13 is the charge.  The PDB atom names must be unique within each params file.

@li <b>BOND</b>
Defines a bond connection, two PDB atom names are specified

@li <b>CHI</b>
Defines a rotatable chi angle.  A chi angle number is specified, followed by the names of the four atoms defining the angle

@li <b>NBR_ATOM</b>
The PDB name of the "neighbor atom". In the case of ligands, this defaults to the atom that is closest to the geometric center of the ligand

@li <b>NBR_RADIUS</b>
The radius of gyration of the ligand, used to define the overall size of the ligand.

@li <b>ICOOR_INTERNAL</b>
The internal coordinates of an atom.  The format looks like this:
@verbatim
ICOOR_INTERNAL    O15  179.932453   59.543328    1.238233   C28   C13   N11
@endverbatim
And the fields are the following: Child atom, phi angle, theta angle, distance, parent atom, angle atom, torsion atom

@li <b>PDB_ROTAMERS</b>
The path to a PDB file containing ligand rotamers

@section generating_conformers Generating Ligand Confromers
If you want to model ligand flexibility during protein-ligand docking, it is necessary to generate a library of ligand conformers. This library needs to be formatted as a PDB file containing the coordinates of each conformer, with the conformers seperated by "TER" lines.  There are a number of ways to generate conformers, with MOE and openeye Omega being the most straight forward.  Rosetta is not currently capable of generating conformers internally.

@section params_by_hand Generating Params Files one at a time using molfile_to_params.py
rosetta_source/src/python/apps/public/molfile_to_params.py generates params file and a pdb file based on an input molfile. Running this script without arguments provides documentation on its usage and options.  The generated PDB file has coordinates identical to the coordinates in the input molfile, and PDB atom names that match the atom names in the params file.  It is critical that the atom names match between the PDB and params file.  By default, the params file generated by this script has the name "LG1".

If you have a library of conformers, append a PDB_ROTAMERS line to the end of the generated params file in the following format:
@verbatim
PDB_ROTAMERS path/to/rotamers.pdb
@endverbatim

@section params_in_bulk Generating Params Files in bulk using batch_conformers.py
If you have a set of ligands in molfile format, you can use the script rosetta_source/src/python/apps/public/batch_molfile_to_params.py  Run the script with the flag -h for a usage statement and basic instructions.  It takes as input the rosetta database, a file containing a list of paths to molfiles, and the path to the molfile.params script.

This script will give each molfile a unique 3 letter code, and parses the rosetta database to ensure that no 3 letter codes are used which conflict with existing ligands in the database.  Each molfile should contain confirmations for only a single ligand. If your mol file contains multiple confirmations, a PDB_ROTAMER file will be created and referenced in the params file. 

you can run it like this:

@verbatim
rosetta_source/src/python/apps/public/batch_molfile_to_params.py -d /path/to/rosetta/rosetta_database --script_path=/path/to/molfile_to_params.py list_of_molfiles.txt
@endverbatim

A new directory called "params" will be created in the directory you executed the script from.  This directory will have a subdirectory for each processed molfile, and this directory will contain the params file and associated ligand pdb file.  In some cases molfile_to_params is unable to successfully create a params file.  In this case, the script will continue, and the path to the failed mol file will be printed to stdout. 




*/