// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file    core/chemical/property_mappings.cc
/// @brief   Method definitions for two private static methods declared in ResidueProperties.hh.
/// @author  Labonte <JWLabonte@jhu.edu>
/// @note    DO NOT EDIT THIS FILE DIRECTLY!  It is auto-generated.
/// If you wish to edit it, modify the add_residue_properties.py script.
/// It is because it is auto-generated that these class methods are not defined in ResidueProperties.cc.

// Unit header
#include <core/chemical/ResidueProperties.hh>

// Utility header
#include <utility/vector1.hh>

// C++ headers
#include <map>

namespace core {
namespace chemical {

using namespace core;

// Get the ResidueProperty enum value from the corresponding sting.
// This private static class method is declared in ResidueProperties.hh.
// If adding new residue properties, DO NOT MANUALLY EDIT THIS FUNCTION DEFINITION.
// Instead, add your property to the database, and run the add_residue_properties.py script.
ResidueProperty const &
ResidueProperties::get_property_from_string( std::string const & property )
{
	using namespace std;

	// This line is only executed once.
	static map< string, ResidueProperty > * PROPERTY_MAP = NULL;

	// If statement ensures that the data is only created once, i.e., is constant.
	if ( ! PROPERTY_MAP ) {
		// A map of ResidueProperty enum values keyed by corresponding string.
		PROPERTY_MAP = new map< string, ResidueProperty >;

		PROPERTY_MAP->insert( make_pair( "POLYMER", POLYMER ) );
		PROPERTY_MAP->insert( make_pair( "LIGAND", LIGAND ) );
		PROPERTY_MAP->insert( make_pair( "PROTEIN", PROTEIN ) );
		PROPERTY_MAP->insert( make_pair( "NA", NA ) );
		PROPERTY_MAP->insert( make_pair( "DNA", DNA ) );
		PROPERTY_MAP->insert( make_pair( "RNA", RNA ) );
		PROPERTY_MAP->insert( make_pair( "PEPTOID", PEPTOID ) );
		PROPERTY_MAP->insert( make_pair( "CARBOHYDRATE", CARBOHYDRATE ) );
		PROPERTY_MAP->insert( make_pair( "LIPID", LIPID ) );
		PROPERTY_MAP->insert( make_pair( "METAL", METAL ) );
		PROPERTY_MAP->insert( make_pair( "SURFACE", SURFACE ) );
		PROPERTY_MAP->insert( make_pair( "WATER", WATER ) );
		PROPERTY_MAP->insert( make_pair( "VIRTUAL_RESIDUE", VIRTUAL_RESIDUE ) );
		PROPERTY_MAP->insert( make_pair( "TERMINUS", TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "LOWER_TERMINUS", LOWER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "UPPER_TERMINUS", UPPER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "BRANCH_LOWER_TERMINUS", BRANCH_LOWER_TERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "BRANCH_POINT", BRANCH_POINT ) );
		PROPERTY_MAP->insert( make_pair( "LOWERTERM_TRUNC", LOWERTERM_TRUNC ) );
		PROPERTY_MAP->insert( make_pair( "UPPERTERM_TRUNC", UPPERTERM_TRUNC ) );
		PROPERTY_MAP->insert( make_pair( "COARSE", COARSE ) );
		PROPERTY_MAP->insert( make_pair( "ADDUCT", ADDUCT ) );
		PROPERTY_MAP->insert( make_pair( "SC_ORBITALS", SC_ORBITALS ) );
		PROPERTY_MAP->insert( make_pair( "POLAR", POLAR ) );
		PROPERTY_MAP->insert( make_pair( "CHARGED", CHARGED ) );
		PROPERTY_MAP->insert( make_pair( "AROMATIC", AROMATIC ) );
		PROPERTY_MAP->insert( make_pair( "CYCLIC", CYCLIC ) );
		PROPERTY_MAP->insert( make_pair( "METALBINDING", METALBINDING ) );
		PROPERTY_MAP->insert( make_pair( "MEMBRANE", MEMBRANE ) );
		PROPERTY_MAP->insert( make_pair( "PHOSPHONATE", PHOSPHONATE ) );
		PROPERTY_MAP->insert( make_pair( "PHOSPHONATE_UPPER", PHOSPHONATE_UPPER ) );
		PROPERTY_MAP->insert( make_pair( "ACETYLATED_NTERMINUS", ACETYLATED_NTERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "METHYLATED_CTERMINUS", METHYLATED_CTERMINUS ) );
		PROPERTY_MAP->insert( make_pair( "ALPHA_AA", ALPHA_AA ) );
		PROPERTY_MAP->insert( make_pair( "BETA_AA", BETA_AA ) );
		PROPERTY_MAP->insert( make_pair( "L_AA", L_AA ) );
		PROPERTY_MAP->insert( make_pair( "D_AA", D_AA ) );
		PROPERTY_MAP->insert( make_pair( "TAUTOMER", TAUTOMER ) );
		PROPERTY_MAP->insert( make_pair( "ALDOSE", ALDOSE ) );
		PROPERTY_MAP->insert( make_pair( "KETOSE", KETOSE ) );
		PROPERTY_MAP->insert( make_pair( "L_SUGAR", L_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "D_SUGAR", D_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "OXIROSE", OXIROSE ) );
		PROPERTY_MAP->insert( make_pair( "OXETOSE", OXETOSE ) );
		PROPERTY_MAP->insert( make_pair( "FURANOSE", FURANOSE ) );
		PROPERTY_MAP->insert( make_pair( "PYRANOSE", PYRANOSE ) );
		PROPERTY_MAP->insert( make_pair( "SEPTANOSE", SEPTANOSE ) );
		PROPERTY_MAP->insert( make_pair( "ALPHA_SUGAR", ALPHA_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "BETA_SUGAR", BETA_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "SIALIC_ACID", SIALIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "ALDONIC_ACID", ALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_2_KETOALDONIC_ACID", _2_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_3_KETOALDONIC_ACID", _3_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_4_KETOALDONIC_ACID", _4_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_5_KETOALDONIC_ACID", _5_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_6_KETOALDONIC_ACID", _6_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_7_KETOALDONIC_ACID", _7_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_8_KETOALDONIC_ACID", _8_KETOALDONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "URONIC_ACID", URONIC_ACID ) );
		PROPERTY_MAP->insert( make_pair( "_1_DEOXY_SUGAR", _1_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_2_DEOXY_SUGAR", _2_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_3_DEOXY_SUGAR", _3_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_4_DEOXY_SUGAR", _4_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_5_DEOXY_SUGAR", _5_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_6_DEOXY_SUGAR", _6_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_7_DEOXY_SUGAR", _7_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_8_DEOXY_SUGAR", _8_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_9_DEOXY_SUGAR", _9_DEOXY_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_1_AMINO_SUGAR", _1_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_2_AMINO_SUGAR", _2_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_3_AMINO_SUGAR", _3_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_4_AMINO_SUGAR", _4_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_5_AMINO_SUGAR", _5_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_6_AMINO_SUGAR", _6_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_7_AMINO_SUGAR", _7_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_8_AMINO_SUGAR", _8_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_9_AMINO_SUGAR", _9_AMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_1_ACETYLAMINO_SUGAR", _1_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_2_ACETYLAMINO_SUGAR", _2_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_3_ACETYLAMINO_SUGAR", _3_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_4_ACETYLAMINO_SUGAR", _4_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_5_ACETYLAMINO_SUGAR", _5_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_6_ACETYLAMINO_SUGAR", _6_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_7_ACETYLAMINO_SUGAR", _7_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_8_ACETYLAMINO_SUGAR", _8_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_9_ACETYLAMINO_SUGAR", _9_ACETYLAMINO_SUGAR ) );
		PROPERTY_MAP->insert( make_pair( "_1_PHOSPHATE", _1_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_2_PHOSPHATE", _2_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_3_PHOSPHATE", _3_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_4_PHOSPHATE", _4_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_5_PHOSPHATE", _5_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_6_PHOSPHATE", _6_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_7_PHOSPHATE", _7_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_8_PHOSPHATE", _8_PHOSPHATE ) );
		PROPERTY_MAP->insert( make_pair( "_9_PHOSPHATE", _9_PHOSPHATE ) );
	}

	return ( *PROPERTY_MAP )[ property ];
}

// Get a string from the corresponding ResidueProperty enum value.
// This private static class method is declared in ResidueProperties.hh.
// If adding new residue properties, DO NOT MANUALLY EDIT THIS FUNCTION DEFINITION.
// Instead, add your property to the database, and run the add_residue_properties.py script.
std::string const &
ResidueProperties::get_string_from_property( ResidueProperty const property )
{
	using namespace std;
	using namespace utility;

	// This line is only executed once.
	static vector1< string > * STRING_LIST = NULL;

	// If statement ensures that the data is only created once, i.e., is constant.
	if ( ! STRING_LIST ) {
		// A vector mapping ResidueProperty enum values to their corresponding strings.
		STRING_LIST = new vector1< string >;
		STRING_LIST->resize( N_RESIDUE_PROPERTIES, "" );

		( *STRING_LIST )[ POLYMER ] = "POLYMER";
		( *STRING_LIST )[ LIGAND ] = "LIGAND";
		( *STRING_LIST )[ PROTEIN ] = "PROTEIN";
		( *STRING_LIST )[ NA ] = "NA";
		( *STRING_LIST )[ DNA ] = "DNA";
		( *STRING_LIST )[ RNA ] = "RNA";
		( *STRING_LIST )[ PEPTOID ] = "PEPTOID";
		( *STRING_LIST )[ CARBOHYDRATE ] = "CARBOHYDRATE";
		( *STRING_LIST )[ LIPID ] = "LIPID";
		( *STRING_LIST )[ METAL ] = "METAL";
		( *STRING_LIST )[ SURFACE ] = "SURFACE";
		( *STRING_LIST )[ WATER ] = "WATER";
		( *STRING_LIST )[ VIRTUAL_RESIDUE ] = "VIRTUAL_RESIDUE";
		( *STRING_LIST )[ TERMINUS ] = "TERMINUS";
		( *STRING_LIST )[ LOWER_TERMINUS ] = "LOWER_TERMINUS";
		( *STRING_LIST )[ UPPER_TERMINUS ] = "UPPER_TERMINUS";
		( *STRING_LIST )[ BRANCH_LOWER_TERMINUS ] = "BRANCH_LOWER_TERMINUS";
		( *STRING_LIST )[ BRANCH_POINT ] = "BRANCH_POINT";
		( *STRING_LIST )[ LOWERTERM_TRUNC ] = "LOWERTERM_TRUNC";
		( *STRING_LIST )[ UPPERTERM_TRUNC ] = "UPPERTERM_TRUNC";
		( *STRING_LIST )[ COARSE ] = "COARSE";
		( *STRING_LIST )[ ADDUCT ] = "ADDUCT";
		( *STRING_LIST )[ SC_ORBITALS ] = "SC_ORBITALS";
		( *STRING_LIST )[ POLAR ] = "POLAR";
		( *STRING_LIST )[ CHARGED ] = "CHARGED";
		( *STRING_LIST )[ AROMATIC ] = "AROMATIC";
		( *STRING_LIST )[ CYCLIC ] = "CYCLIC";
		( *STRING_LIST )[ METALBINDING ] = "METALBINDING";
		( *STRING_LIST )[ MEMBRANE ] = "MEMBRANE";
		( *STRING_LIST )[ PHOSPHONATE ] = "PHOSPHONATE";
		( *STRING_LIST )[ PHOSPHONATE_UPPER ] = "PHOSPHONATE_UPPER";
		( *STRING_LIST )[ ACETYLATED_NTERMINUS ] = "ACETYLATED_NTERMINUS";
		( *STRING_LIST )[ METHYLATED_CTERMINUS ] = "METHYLATED_CTERMINUS";
		( *STRING_LIST )[ ALPHA_AA ] = "ALPHA_AA";
		( *STRING_LIST )[ BETA_AA ] = "BETA_AA";
		( *STRING_LIST )[ L_AA ] = "L_AA";
		( *STRING_LIST )[ D_AA ] = "D_AA";
		( *STRING_LIST )[ TAUTOMER ] = "TAUTOMER";
		( *STRING_LIST )[ ALDOSE ] = "ALDOSE";
		( *STRING_LIST )[ KETOSE ] = "KETOSE";
		( *STRING_LIST )[ L_SUGAR ] = "L_SUGAR";
		( *STRING_LIST )[ D_SUGAR ] = "D_SUGAR";
		( *STRING_LIST )[ OXIROSE ] = "OXIROSE";
		( *STRING_LIST )[ OXETOSE ] = "OXETOSE";
		( *STRING_LIST )[ FURANOSE ] = "FURANOSE";
		( *STRING_LIST )[ PYRANOSE ] = "PYRANOSE";
		( *STRING_LIST )[ SEPTANOSE ] = "SEPTANOSE";
		( *STRING_LIST )[ ALPHA_SUGAR ] = "ALPHA_SUGAR";
		( *STRING_LIST )[ BETA_SUGAR ] = "BETA_SUGAR";
		( *STRING_LIST )[ SIALIC_ACID ] = "SIALIC_ACID";
		( *STRING_LIST )[ ALDONIC_ACID ] = "ALDONIC_ACID";
		( *STRING_LIST )[ _2_KETOALDONIC_ACID ] = "_2_KETOALDONIC_ACID";
		( *STRING_LIST )[ _3_KETOALDONIC_ACID ] = "_3_KETOALDONIC_ACID";
		( *STRING_LIST )[ _4_KETOALDONIC_ACID ] = "_4_KETOALDONIC_ACID";
		( *STRING_LIST )[ _5_KETOALDONIC_ACID ] = "_5_KETOALDONIC_ACID";
		( *STRING_LIST )[ _6_KETOALDONIC_ACID ] = "_6_KETOALDONIC_ACID";
		( *STRING_LIST )[ _7_KETOALDONIC_ACID ] = "_7_KETOALDONIC_ACID";
		( *STRING_LIST )[ _8_KETOALDONIC_ACID ] = "_8_KETOALDONIC_ACID";
		( *STRING_LIST )[ URONIC_ACID ] = "URONIC_ACID";
		( *STRING_LIST )[ _1_DEOXY_SUGAR ] = "_1_DEOXY_SUGAR";
		( *STRING_LIST )[ _2_DEOXY_SUGAR ] = "_2_DEOXY_SUGAR";
		( *STRING_LIST )[ _3_DEOXY_SUGAR ] = "_3_DEOXY_SUGAR";
		( *STRING_LIST )[ _4_DEOXY_SUGAR ] = "_4_DEOXY_SUGAR";
		( *STRING_LIST )[ _5_DEOXY_SUGAR ] = "_5_DEOXY_SUGAR";
		( *STRING_LIST )[ _6_DEOXY_SUGAR ] = "_6_DEOXY_SUGAR";
		( *STRING_LIST )[ _7_DEOXY_SUGAR ] = "_7_DEOXY_SUGAR";
		( *STRING_LIST )[ _8_DEOXY_SUGAR ] = "_8_DEOXY_SUGAR";
		( *STRING_LIST )[ _9_DEOXY_SUGAR ] = "_9_DEOXY_SUGAR";
		( *STRING_LIST )[ _1_AMINO_SUGAR ] = "_1_AMINO_SUGAR";
		( *STRING_LIST )[ _2_AMINO_SUGAR ] = "_2_AMINO_SUGAR";
		( *STRING_LIST )[ _3_AMINO_SUGAR ] = "_3_AMINO_SUGAR";
		( *STRING_LIST )[ _4_AMINO_SUGAR ] = "_4_AMINO_SUGAR";
		( *STRING_LIST )[ _5_AMINO_SUGAR ] = "_5_AMINO_SUGAR";
		( *STRING_LIST )[ _6_AMINO_SUGAR ] = "_6_AMINO_SUGAR";
		( *STRING_LIST )[ _7_AMINO_SUGAR ] = "_7_AMINO_SUGAR";
		( *STRING_LIST )[ _8_AMINO_SUGAR ] = "_8_AMINO_SUGAR";
		( *STRING_LIST )[ _9_AMINO_SUGAR ] = "_9_AMINO_SUGAR";
		( *STRING_LIST )[ _1_ACETYLAMINO_SUGAR ] = "_1_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _2_ACETYLAMINO_SUGAR ] = "_2_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _3_ACETYLAMINO_SUGAR ] = "_3_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _4_ACETYLAMINO_SUGAR ] = "_4_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _5_ACETYLAMINO_SUGAR ] = "_5_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _6_ACETYLAMINO_SUGAR ] = "_6_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _7_ACETYLAMINO_SUGAR ] = "_7_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _8_ACETYLAMINO_SUGAR ] = "_8_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _9_ACETYLAMINO_SUGAR ] = "_9_ACETYLAMINO_SUGAR";
		( *STRING_LIST )[ _1_PHOSPHATE ] = "_1_PHOSPHATE";
		( *STRING_LIST )[ _2_PHOSPHATE ] = "_2_PHOSPHATE";
		( *STRING_LIST )[ _3_PHOSPHATE ] = "_3_PHOSPHATE";
		( *STRING_LIST )[ _4_PHOSPHATE ] = "_4_PHOSPHATE";
		( *STRING_LIST )[ _5_PHOSPHATE ] = "_5_PHOSPHATE";
		( *STRING_LIST )[ _6_PHOSPHATE ] = "_6_PHOSPHATE";
		( *STRING_LIST )[ _7_PHOSPHATE ] = "_7_PHOSPHATE";
		( *STRING_LIST )[ _8_PHOSPHATE ] = "_8_PHOSPHATE";
		( *STRING_LIST )[ _9_PHOSPHATE ] = "_9_PHOSPHATE";
	}

	return ( *STRING_LIST )[ property ];
}

}  // namespace chemical
}  // namespace core
