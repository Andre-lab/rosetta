// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file    core/chemical/ResidueProperties.hh
/// @brief   Declarations and simple accessor/mutator definitions for ResidueProperties.
/// @author  Labonte <JWLabonte@jhu.edu>

#ifndef INCLUDED_core_chemical_ResidueProperties_HH
#define INCLUDED_core_chemical_ResidueProperties_HH

// Unit headers
#include <core/chemical/ResidueProperties.fwd.hh>
#include <core/chemical/ResidueProperty.hh>

// Package headers
#include <core/chemical/VariantType.fwd.hh>

// Project headers
#include <core/types.hh>

// Utility headers
#include <utility/pointer/ReferenceCount.hh>
#include <utility/vector1.hh>

// C++ headers
#include <map>
#include <iostream>

namespace core {
namespace chemical {

/// @details This is a container class for the large assortment of properties associated with ResidueTypes.
/// It prevents ResidueType from becoming cluttered with an over-abundance of properties and related methods.
/// @remarks This is the first step in a major refactor of how properties are handled in Rosetta.
/// For now, I have just gathered all the properties related code into one place, so that changes to the system can be
/// more readily made.  Previous behavior has been maintained.  In the future, I have several ideas for further
/// improvements. ~Labonte
class ResidueProperties : public utility::pointer::ReferenceCount {
public:  // Standard methods //////////////////////////////////////////////////
	/// @brief  Default constructor
	ResidueProperties();

	/// @brief  Copy constructor
	ResidueProperties( ResidueProperties const & object_to_copy );

	// Assignment operator
	ResidueProperties & operator=( ResidueProperties const & object_to_copy );

	// Destructor
	virtual ~ResidueProperties();


public:  // Standard Rosetta methods //////////////////////////////////////////
	/// @brief  Generate string representation of ResidueProperties for debugging purposes.
	virtual void show( std::ostream & output=std::cout ) const;


public:  // Accessors/Mutators ////////////////////////////////////////////////
	/// @brief  Get whether or not this ResidueType has the requested property.
	bool
	has_property( ResidueProperty const property ) const
	{
		return general_property_status_[ property ];
	}

	/// @brief  Get whether or not this ResidueType has the requested property by string.
	bool has_property( std::string const & property ) const;


	/// @brief  Set the status of the given property for this ResidueType.
	void
	set_property( ResidueProperty const property, bool const setting )
	{
		general_property_status_[ property ] = setting;
	}

	/// @brief  Set the status of the given property for this ResidueType by string.
	void set_property( std::string const & property, bool const setting );


	/// @brief get all the variant types for this ResidueType
	utility::vector1< VariantType > const &
	variant_types() const
	{
		return variant_types_;
	}

	/// @brief  Get whether or not this ResidueType has the requested VariantType.
	bool has_variant_type( VariantType const & variant_type ) const;

	/// @brief Add a variant type to this ResidueType.
	void add_variant_type( VariantType const & variant_type );


	///@brief  Add a numeric property.
	void add_numeric_property( std::string const & tag, core::Real const value );

	///@brief  Add a string property.
	void add_string_property( std::string const & tag, std::string const value );

	std::map< std::string, core::Real > const &
	numeric_properties() const
	{
		return numeric_properties_;
	}

	std::map< std::string, std::string > const &
	string_properties() const
	{
		return string_properties_;
	}


public:  // Other public methods //////////////////////////////////////////////
	/// @brief  Generate and return a list of strings representing the properties of this ResidueType.
	utility::vector1< std::string > get_list_of_properties() const;


private: // Private methods ///////////////////////////////////////////////////
	// Initialize data members.
	void init();

	// Copy all data members from <from> to <to>.
	void copy_data( ResidueProperties & to, ResidueProperties const & from );


private: // Static constant data access
	// Get the ResidueProperty enum value from the corresponding sting.
	// This private static class method is defined in property_mappings.cc,
	// which is auto-generated by the add_residue_properties.py script.
	static ResidueProperty const & get_property_from_string( std::string const & property);

	// Get a string from the corresponding ResidueProperty enum value.
	// This private static class method is defined in property_mappings.cc,
	// which is auto-generated by the add_residue_properties.py script.
	static std::string const & get_string_from_property( ResidueProperty const property );


private: // Private data //////////////////////////////////////////////////////
	// Storage of general properties.
	utility::vector1< bool > general_property_status_;  // indexed by ResidueProperty

	// The patch operations/variant types that describe this residue.
	utility::vector1< VariantType > variant_types_;

	// Arbitrary numeric properties with string names.
	std::map<std::string,core::Real> numeric_properties_;

	// Arbitrary string properties with string names.
	std::map<std::string,std::string> string_properties_;
};


// Insertion operator (overloaded so that ResidueProperties can be "printed" in PyRosetta).
std::ostream & operator<<( std::ostream & output, ResidueProperties const & object_to_output );

// This allows one to use a for loop with ResidueProperty enum values.
ResidueProperty & operator++( ResidueProperty & property );

}  // namespace chemical
}  // namespace core

#endif  // INCLUDED_core_chemical_ResidueProperties_HH
