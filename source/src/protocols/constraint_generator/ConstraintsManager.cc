// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available
// (c) under license. The Rosetta software is developed by the contributing
// (c) members of the Rosetta Commons. For more information, see
// (c) http://www.rosettacommons.org. Questions about this can be addressed to
// (c) University of Washington UW TechTransfer,email:license@u.washington.edu.

/// @file protocols/constraint_generator/ConstraintsManager.cc
/// @brief Manages lists of constraints generated by ConstraintGenerators
/// @author Tom Linsky (tlinsky@uw.edu)

#include <protocols/constraint_generator/ConstraintsManager.hh>

// Core headers
#include <core/pose/Pose.hh>

// Basic/Utility headers
#include <basic/Tracer.hh>
#include <basic/datacache/BasicDataCache.hh>

static THREAD_LOCAL basic::Tracer TR( "protocols.constraint_generator.ConstraintsManager" );

namespace protocols {
namespace constraint_generator {

// static const data
core::pose::datacache::CacheableDataType::Enum const
ConstraintsManager::MY_TYPE = core::pose::datacache::CacheableDataType::CONSTRAINT_GENERATOR;

ConstraintsMap::ConstraintsMap():
	basic::datacache::CacheableData(),
	cst_map_()
{}

ConstraintsMap::~ConstraintsMap()
{}

basic::datacache::CacheableDataOP
ConstraintsMap::clone() const
{
	return basic::datacache::CacheableDataOP( new ConstraintsMap( *this ) );
}

/// @brief Insert csts into the ConstraintsMap under the name given.
/// @param[in] name Map key name under which constraints will be stored
/// @param[in] csts Constraints to store
/// @returns ConstraintsMap::iterator to new map item.
ConstraintsMap::iterator
ConstraintsMap::insert( std::string const & name, ConstraintCOPs const & csts )
{
	std::pair< std::string, ConstraintCOPs > const pair( name, csts );
	return cst_map_.insert( pair ).first;
}

void
ConstraintsMap::erase( iterator const & erase_me )
{
	cst_map_.erase( erase_me );
}

ConstraintsMap::iterator
ConstraintsMap::find( std::string const & name )
{
	return cst_map_.find( name );
}

ConstraintsMap::const_iterator
ConstraintsMap::find( std::string const & name ) const
{
	return cst_map_.find( name );
}

ConstraintsMap::iterator
ConstraintsMap::begin()
{
	return cst_map_.begin();
}

ConstraintsMap::const_iterator
ConstraintsMap::begin() const
{
	return cst_map_.begin();
}

ConstraintsMap::iterator
ConstraintsMap::end()
{
	return cst_map_.end();
}

ConstraintsMap::const_iterator
ConstraintsMap::end() const
{
	return cst_map_.end();
}

ConstraintsManager::ConstraintsManager():
	utility::SingletonBase< ConstraintsManager >()
{
}

ConstraintsManager::~ConstraintsManager(){}

ConstraintsManager *
ConstraintsManager::create_singleton_instance()
{
	return new ConstraintsManager;
}

/// @brief Clears constraints stored under the given name
/// @details  If constraints are not found under the given name, or there is no
///           cached data, this will do nothing.
/// @param[in,out] pose  Pose where constraints are cached
/// @param[in]     name  Name under which constraints are cached
void
ConstraintsManager::remove_constraints( core::pose::Pose & pose, std::string const & name ) const
{
	// do nothing if no data is cached
	if ( !pose.data().has( MY_TYPE ) ) return;

	ConstraintsMap & map = retrieve_constraints_map( pose );
	ConstraintsMap::iterator cst_it = map.find( name );

	// do nothing if no constraints are found under this name
	if ( cst_it == map.end() ) return;

	map.erase( cst_it );
}

/// @brief adds an empty constraints map to the pose datacache
void
ConstraintsManager::store_empty_constraints_map( core::pose::Pose & pose ) const
{
	pose.data().set( MY_TYPE, ConstraintsMapOP( new ConstraintsMap ) );
}

/// @brief Given a nonconst pose, returns a nonconst reference to its constraints map
ConstraintsMap &
ConstraintsManager::retrieve_constraints_map( core::pose::Pose & pose ) const
{
	using core::pose::datacache::CacheableDataType;

	if ( !pose.data().has( MY_TYPE ) ) store_empty_constraints_map( pose );

	debug_assert( pose.data().has( MY_TYPE ) );
	basic::datacache::CacheableData & cached = pose.data().get( MY_TYPE );
	debug_assert( dynamic_cast< ConstraintsMap * >( &cached ) == &cached );
	return static_cast< ConstraintsMap & >( cached );
}

/// @brief Given a const pose, returns a const reference to its constraints map, throwing error if
///        no constaints map is present
ConstraintsMap const &
ConstraintsManager::retrieve_constraints_map( core::pose::Pose const & pose ) const
{
	using core::pose::datacache::CacheableDataType;

	if ( !pose.data().has( MY_TYPE ) ) {
		std::stringstream msg;
		msg << "No cached constraint map was found in the pose!  Be sure to use ConstraintsManager "
			<< "to store generated constraints in the pose before trying to access them." << std::endl;
		utility_exit_with_message( msg.str() );
	}

	debug_assert( pose.data().has( MY_TYPE ) );
	basic::datacache::CacheableData const & cached = pose.data().get( MY_TYPE );
	debug_assert( dynamic_cast< ConstraintsMap const * >( &cached ) == &cached );
	return static_cast< ConstraintsMap const & >( cached );
}

/// @brief Stores the given constraints in the pose datacache, under the name given.
/// @param[in,out] pose  Pose where constraints will be cached
/// @param[in]     name  Name under which constraints will be stored
/// @param[in]     csts  Constraints to cache
void
ConstraintsManager::store_constraints(
	core::pose::Pose & pose,
	std::string const & name,
	ConstraintCOPs const & csts ) const
{
	ConstraintsMap & map = retrieve_constraints_map( pose );
	ConstraintsMap::iterator cst_it = map.find( name );
	if ( cst_it == map.end() ) {
		cst_it = map.insert( name, csts );
	} else {
		TR.Debug << "Overwriting cached constraints for " << name << std::endl;
		cst_it->second = csts;
	}
}

/// @brief Retrieves constraints from the pose datacache with the given name.
/// @param[in] pose  Pose where constraints are cached
/// @param[in] name  Name under which constraints are stored
/// @returns   Const reference to list of stored constraints
ConstraintsManager::ConstraintCOPs const &
ConstraintsManager::retrieve_constraints(
	core::pose::Pose const & pose,
	std::string const & name ) const
{
	ConstraintsMap const & map = retrieve_constraints_map( pose );
	ConstraintsMap::const_iterator cst_it = map.find( name );
	if ( cst_it == map.end() ) {
		std::stringstream msg;
		msg << "No constraints were found in the pose datacache under the name "
			<< name << ": valid names are: ";
		print_valid_names( msg, map );
		utility_exit_with_message( msg.str() );
	}
	return cst_it->second;
}

/// @brief Checks to see whether constraints exist in datacache under the given name
/// @param[in] pose  Pose where constraints are cached
/// @param[in] name  Name under which constraints may be stored
bool
ConstraintsManager::has_stored_constraints( core::pose::Pose const & pose, std::string const & name ) const
{
	if ( !pose.data().has( MY_TYPE ) ) return false;
	ConstraintsMap const & map = retrieve_constraints_map( pose );
	return ( map.find( name ) != map.end() );
}

void
ConstraintsManager::print_valid_names( std::ostream & os, ConstraintsMap const & map ) const
{
	os << "Valid constraint set names are: ";
	for ( ConstraintsMap::const_iterator c=map.begin(); c!=map.end(); ++c ) {
		os << c->first << " ";
	}
	os << std::endl;
}

} //protocols
} //constraint_generator

// Singleton instance and mutex static data members
namespace utility {

using protocols::constraint_generator::ConstraintsManager;

#if defined MULTI_THREADED && defined CXX11
template<> std::mutex utility::SingletonBase< ConstraintsManager >::singleton_mutex_{};
template<> std::atomic< ConstraintsManager * > utility::SingletonBase< ConstraintsManager >::instance_( NULL );
#else
template<> ConstraintsManager * utility::SingletonBase< ConstraintsManager >::instance_( NULL );
#endif

} // namespace utility
