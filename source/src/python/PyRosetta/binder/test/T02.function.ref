// File: T02_function.cpp
#include <T02.function.hpp> // A
#include <T02.function.hpp> // foo
#include <T02.function.hpp> // foo_p
#include <T02.function.hpp> // foo_r
#include <memory> // std::shared_ptr
#include <memory> // std::shared_ptr<A>::shared_ptr

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
#endif

void bind_T02_function(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // A file:T02.function.hpp line:19
		pybind11::class_<A, std::shared_ptr<A>> cl(M(""), "A");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
	}
	// foo(bool) file:T02.function.hpp line:21
	M("").def("foo", (void (*)(bool)) &foo, "doc", pybind11::arg(""));

	// foo(int) file:T02.function.hpp line:22
	M("").def("foo", (void (*)(int)) &foo, "doc", pybind11::arg(""));

	// foo(long) file:T02.function.hpp line:23
	M("").def("foo", (void (*)(long)) &foo, "doc", pybind11::arg(""));

	// foo(float) file:T02.function.hpp line:24
	M("").def("foo", (void (*)(float)) &foo, "doc", pybind11::arg(""));

	// foo(double) file:T02.function.hpp line:25
	M("").def("foo", (void (*)(double)) &foo, "doc", pybind11::arg(""));

	// foo(class A) file:T02.function.hpp line:26
	M("").def("foo", (void (*)(class A)) &foo, "doc", pybind11::arg(""));

	// foo(class std::shared_ptr<class A>) file:T02.function.hpp line:27
	M("").def("foo", (void (*)(class std::shared_ptr<class A>)) &foo, "doc", pybind11::arg(""));

	// foo_r(bool &) file:T02.function.hpp line:29
	M("").def("foo_r", (void (*)(bool &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(int &) file:T02.function.hpp line:30
	M("").def("foo_r", (void (*)(int &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(long &) file:T02.function.hpp line:31
	M("").def("foo_r", (void (*)(long &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(float &) file:T02.function.hpp line:32
	M("").def("foo_r", (void (*)(float &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(double &) file:T02.function.hpp line:33
	M("").def("foo_r", (void (*)(double &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(class A &) file:T02.function.hpp line:34
	M("").def("foo_r", (void (*)(class A &)) &foo_r, "doc", pybind11::arg(""));

	// foo_r(class std::shared_ptr<class A> &) file:T02.function.hpp line:35
	M("").def("foo_r", (void (*)(class std::shared_ptr<class A> &)) &foo_r, "doc", pybind11::arg(""));

	// foo_p(class A *) file:T02.function.hpp line:42
	M("").def("foo_p", (void (*)(class A *)) &foo_p, "doc", pybind11::arg(""));

	// foo_p(class std::shared_ptr<class A> *) file:T02.function.hpp line:43
	M("").def("foo_p", (void (*)(class std::shared_ptr<class A> *)) &foo_p, "doc", pybind11::arg(""));

}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_T02_function(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_PLUGIN(T02_function) {
	std::map <std::string, std::shared_ptr<pybind11::module> > modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return * it->second;
	};

	modules[""] = std::make_shared<pybind11::module>("T02_function", "T02_function module");

	std::vector< std::pair<std::string, std::string> > sub_modules {
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = std::make_shared<pybind11::module>( modules[p.first]->def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() ) );

	bind_T02_function(M);

	return modules[""]->ptr();
}

// Source list file: /home/benchmark/rosetta/binder/main/source/src/python/PyRosetta/binder/test/build/T02_function.sources
// /home/benchmark/rosetta/binder/main/source/src/python/PyRosetta/binder/test/build/T02_function.cpp
// T02_function.cpp
