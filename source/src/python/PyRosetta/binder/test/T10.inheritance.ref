// File: T10_inheritance.cpp
#include <T10.inheritance.hpp> // A
#include <T10.inheritance.hpp> // A::A
#include <T10.inheritance.hpp> // A::operator=
#include <T10.inheritance.hpp> // B
#include <T10.inheritance.hpp> // B::B
#include <T10.inheritance.hpp> // B::operator=
#include <T10.inheritance.hpp> // Base
#include <T10.inheritance.hpp> // Base::foo
#include <T10.inheritance.hpp> // Base::maybe
#include <T10.inheritance.hpp> // Delete
#include <sstream> // __str__

#include <pybind11/pybind11.h>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>);
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*);
#endif

void bind_T10_inheritance(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // Base file:T10.inheritance.hpp line:20
		pybind11::class_<Base, std::shared_ptr<Base>> cl(M(""), "Base", "");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
		cl.def("foo", (void (Base::*)()) &Base::foo, "C++: Base::foo() --> void");
		cl.def("maybe", (void (Base::*)()) &Base::maybe, "C++: Base::maybe() --> void");
	}
	{ // Delete file:T10.inheritance.hpp line:30
		pybind11::class_<Delete, std::shared_ptr<Delete>, Base> cl(M(""), "Delete", "");
		pybind11::handle cl_type = cl;

	}
	{ // A file:T10.inheritance.hpp line:38
		pybind11::class_<A, std::shared_ptr<A>> cl(M(""), "A", "");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
		cl.def(pybind11::init<const class A &>(), pybind11::arg(""));

		cl.def("assign", (class A & (A::*)(const class A &)) &A::operator=, "C++: A::operator=(const class A &) --> class A &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}
	{ // B file:T10.inheritance.hpp line:41
		pybind11::class_<B, std::shared_ptr<B>> cl(M(""), "B", "");
		pybind11::handle cl_type = cl;

		cl.def(pybind11::init<>());
		cl.def(pybind11::init<const class B &>(), pybind11::arg(""));

		cl.def("assign", (class B & (B::*)(const class B &)) &B::operator=, "C++: B::operator=(const class B &) --> class B &", pybind11::return_value_policy::automatic, pybind11::arg(""));
	}
}


#include <map>
#include <memory>
#include <stdexcept>
#include <functional>

#include <pybind11/pybind11.h>

typedef std::function< pybind11::module & (std::string const &) > ModuleGetter;

void bind_T10_inheritance(std::function< pybind11::module &(std::string const &namespace_) > &M);


PYBIND11_PLUGIN(T10_inheritance) {
	std::map <std::string, std::shared_ptr<pybind11::module> > modules;
	ModuleGetter M = [&](std::string const &namespace_) -> pybind11::module & {
		auto it = modules.find(namespace_);
		if( it == modules.end() ) throw std::runtime_error("Attempt to access pybind11::module for namespace " + namespace_ + " before it was created!!!");
		return * it->second;
	};

	modules[""] = std::make_shared<pybind11::module>("T10_inheritance", "T10_inheritance module");

	std::vector< std::pair<std::string, std::string> > sub_modules {
	};
	for(auto &p : sub_modules ) modules[p.first.size() ? p.first+"::"+p.second : p.second] = std::make_shared<pybind11::module>( modules[p.first]->def_submodule(p.second.c_str(), ("Bindings for " + p.first + "::" + p.second + " namespace").c_str() ) );

	bind_T10_inheritance(M);

	return modules[""]->ptr();
}

// Source list file: TEST/T10_inheritance.sources
// T10_inheritance.cpp
// T10_inheritance.cpp

// Modules list file: TEST/T10_inheritance.modules
// 
