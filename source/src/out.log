In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:33:
In file included from ./numeric/xyzVector.hh:32:
In file included from ./numeric/trig.functions.hh:21:
In file included from ./numeric/numeric.functions.hh:23:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/algorithm:594:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1448:22: error: implicit instantiation of undefined template 'std::allocator<bool>'
    typedef typename allocator_type::value_type value_type;
                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/vector:1974:22: note: in instantiation of template class 'std::__1::allocator_traits<std::allocator<bool> >' requested here
    typedef typename __alloc_traits::size_type       size_type;
                     ^
./utility/vectorL_bool.hh:42:10: note: in instantiation of template class 'std::__1::vector<bool, std::allocator<bool> >' requested here
        private std::vector< bool, A >
                ^
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
./utility/vector1.fwd.hh:35:44: note: template is declared here
namespace std { template< typename > class allocator; }
                                           ^
In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:33:
In file included from ./numeric/xyzVector.hh:32:
In file included from ./numeric/trig.functions.hh:21:
In file included from ./numeric/numeric.functions.hh:23:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/algorithm:594:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1448:22: error: implicit instantiation of undefined template 'std::allocator<int>'
    typedef typename allocator_type::value_type value_type;
                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/vector:2006:22: note: in instantiation of template class 'std::__1::allocator_traits<std::allocator<int> >' requested here
    typedef typename __storage_traits::pointer       __storage_pointer;
                     ^
./utility/vectorL_bool.hh:42:10: note: in instantiation of template class 'std::__1::vector<bool, std::allocator<bool> >' requested here
        private std::vector< bool, A >
                ^
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
./utility/vector1.fwd.hh:35:44: note: template is declared here
namespace std { template< typename > class allocator; }
                                           ^
In file included from core/membrane/MembraneProteinFactory.hh:48:
In file included from ./core/membrane/MembraneProteinFactory.fwd.hh:23:
In file included from ./utility/pointer/owning_ptr.hh:42:
In file included from ../external/boost_1_46_1/boost/type_traits/remove_const.hpp:14:
In file included from ../external/boost_1_46_1/boost/type_traits/is_volatile.hpp:24:
In file included from ../external/boost_1_46_1/boost/config.hpp:40:
In file included from ../external/boost_1_46_1/boost/config/select_stdlib_config.hpp:33:
In file included from ../external/boost_1_46_1/boost/config/no_tr1/utility.hpp:21:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/utility:125:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/__tuple:16:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/type_traits:770:38: error: implicit instantiation of undefined template 'std::allocator<int>'
    : public integral_constant<bool, __is_empty(_Tp)> {};
                                     ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1951:40: note: in instantiation of template class 'std::__1::is_empty<std::allocator<int> >' requested here
                                bool = is_empty<_T2>::value
                                       ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1973:44: note: in instantiation of default argument for '__libcpp_compressed_pair_switch<int, std::allocator<int>, false, false>' required here
template <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:2357:15: note: in instantiation of default argument for '__libcpp_compressed_pair_imp<int, std::allocator<int> >' required here
    : private __libcpp_compressed_pair_imp<_T1, _T2>
              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/vector:2011:55: note: in instantiation of template class 'std::__1::__compressed_pair<int, std::allocator<int> >' requested here
    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
                                                      ^
./utility/vectorL_bool.hh:42:10: note: in instantiation of template class 'std::__1::vector<bool, std::allocator<bool> >' requested here
        private std::vector< bool, A >
                ^
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
./utility/vector1.fwd.hh:35:44: note: template is declared here
namespace std { template< typename > class allocator; }
                                           ^
In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:33:
In file included from ./numeric/xyzVector.hh:32:
In file included from ./numeric/trig.functions.hh:21:
In file included from ./numeric/numeric.functions.hh:23:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/algorithm:594:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1951:55: error: no member named 'value' in 'std::__1::is_empty<std::allocator<int> >'
                                bool = is_empty<_T2>::value
                                       ~~~~~~~~~~~~~~~^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:1973:44: note: in instantiation of default argument for '__libcpp_compressed_pair_switch<int, std::allocator<int>, false, false>' required here
template <class _T1, class _T2, unsigned = __libcpp_compressed_pair_switch<_T1, _T2>::value>
                                           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:2359:13: note: in instantiation of default argument for '__libcpp_compressed_pair_imp<int, std::allocator<int> >' required here
    typedef __libcpp_compressed_pair_imp<_T1, _T2> base;
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/vector:2011:55: note: in instantiation of template class 'std::__1::__compressed_pair<int, std::allocator<int> >' requested here
    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
                                                      ^
./utility/vectorL_bool.hh:42:10: note: in instantiation of template class 'std::__1::vector<bool, std::allocator<bool> >' requested here
        private std::vector< bool, A >
                ^
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:33:
In file included from ./numeric/xyzVector.hh:32:
In file included from ./numeric/trig.functions.hh:21:
In file included from ./numeric/numeric.functions.hh:23:
In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/algorithm:594:
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:2373:40: error: multiple overloads of '__compressed_pair' instantiate to the same signature 'void (_T2_param)'
    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T2_param __t2)
                                       ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/vector:2011:55: note: in instantiation of template class 'std::__1::__compressed_pair<int, std::allocator<int> >' requested here
    __compressed_pair<size_type, __storage_allocator> __cap_alloc_;
                                                      ^
./utility/vectorL_bool.hh:42:10: note: in instantiation of template class 'std::__1::vector<bool, std::allocator<bool> >' requested here
        private std::vector< bool, A >
                ^
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/memory:2371:40: note: previous declaration is here
    _LIBCPP_INLINE_VISIBILITY explicit __compressed_pair(_T1_param __t1)
                                       ^
In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:39:
In file included from ./utility/vector1.hh:23:
In file included from ./utility/vectorL.hh:832:
./utility/vectorL_bool.hh:91:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::assign;
              ^~~~~~~
./utility/vector1_bool.hh:38:9: note: in instantiation of template class 'utility::vectorL<1, bool, std::allocator<bool> >' requested here
        public vectorL< 1, bool, A >
               ^
./core/membrane/properties/SpanningTopology.hh:141:34: note: in instantiation of template class 'utility::vector1<bool, std::allocator<bool> >' requested here
        utility::vector1< bool > allow_scoring_;
                                 ^
In file included from core/membrane/MembraneProteinFactory.hh:51:
In file included from ./core/membrane/properties/SpanningTopology.hh:39:
In file included from ./utility/vector1.hh:23:
In file included from ./utility/vectorL.hh:832:
./utility/vectorL_bool.hh:92:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::back;
              ^~~~~~~
./utility/vectorL_bool.hh:93:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::begin;
              ^~~~~~~
./utility/vectorL_bool.hh:94:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::capacity;
              ^~~~~~~
./utility/vectorL_bool.hh:95:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::clear;
              ^~~~~~~
./utility/vectorL_bool.hh:96:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::empty;
              ^~~~~~~
./utility/vectorL_bool.hh:97:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::end;
              ^~~~~~~
./utility/vectorL_bool.hh:98:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::erase;
              ^~~~~~~
./utility/vectorL_bool.hh:99:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::flip;
              ^~~~~~~
./utility/vectorL_bool.hh:100:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::front;
              ^~~~~~~
./utility/vectorL_bool.hh:101:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::get_allocator;
              ^~~~~~~
./utility/vectorL_bool.hh:102:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::insert;
              ^~~~~~~
./utility/vectorL_bool.hh:103:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::max_size;
              ^~~~~~~
./utility/vectorL_bool.hh:104:8: error: using declaration refers into 'super::', which is not a base class of 'vectorL<1, bool, std::allocator<bool> >'
        using super::pop_back;
              ^~~~~~~
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
