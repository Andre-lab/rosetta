# -*- mode:python;indent-tabs-mode:t;show-trailing-whitespace:t; -*-
#
# Project settings for rosetta sources
# (c) Copyright Rosetta Commons Member Institutions.
# (c) This file is part of the Rosetta software suite and is made available under license.
# (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
# (c) For more information, see http://www.rosettacommons.org. Questions about this can be
# (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

########### KEEP DIRECTORIES AND FILES IN ALPHABETICAL ORDER ###########

sources = {
	"protocols/abinitio": [
		"AbrelaxApplication",
		"AbrelaxMover",
		"BrokerMain",
		"ClassicAbinitio",
		"ConstraintFragmentSampler",
		"DomainAssembly",
		"DoubleLayerKinematicAbinitio",
		"FoldConstraints",
		"FragmentSampler",
                "HedgeArchive",
		"IterativeAbrelax",
		"IterativeBase",
		"IterativeCentroid",
		"IterativeFullatom",
		"KinematicAbinitio",
		"KinematicControl",
		"KinematicTaskControl",
		"LoopJumpFoldCst",
		"MembraneAbinitio",
		"PairingStatistics",
		"Protocol",
		"ResolutionSwitcher",
		"StrandConstraints",
		"Template",
		"TemplateJumpSetup",
		"Templates",
		"vs_test",
	],
	"protocols/abinitio/abscript": [
		"AbscriptLoopCloserCM",
	        "AbscriptMover",
		"AbscriptStageMover",
		"ConstraintPreparer",
	        "FragmentCM",
		"FragmentJumpCM",
		"JumpSampleData",
		"StagePreparer",
	],
	"protocols/hybridization" : [
		"CartesianHybridize",
		"CartesianSampler",
		"ChunkTrialMover",
		"DDomainParse",
		"DomainAssembly",
		"FoldTreeHybridize",
		"HybridizeFoldtreeDynamic",
		"HybridizeProtocol",
		"InsertChunkMover",
		"MRMover",
		"TemplateHistory",
		"WeightedFragmentTrialMover",
		"WeightedFragmentSmoothTrialMover",
		"util",
	],
	"protocols/jumping": [
		"DisulfPairingLibrary",
		"DisulfPairingsList",
		"JumpSample",
		"JumpSetup",
		"MembraneJump",
		"PairingLibrary",
		"RandomSheetBuilder",
		"ResiduePairJump",
		"ResiduePairJumpSetup",
		"SameStrand",
		"SheetBuilder",
		"util",
	],
	"protocols/loop_build": [
		"LoopBuild",
		"LoopMover_SlidingWindow",
		"LoopMover_SlidingWindowCreator",
		"LoopBuildMover",
	],
	"protocols/noesy_assign": [
                "CovalentCompliance",
		"CrossPeak",
		"CrossPeakInfo",
		"CrossPeakList",
		"DistanceScoreMover",
                "FloatingResonance",
		"FragsToAtomDist",
                "MethylNames",
 		"NoesyModule",
		"PeakAssignment",
		"PeakAssignmentParameters",
		"PeakAssignmentResidueMap",
		"PeakCalibrator",
		"PeakFileFormat",
		"PeakFileFormat_Sparky",
		"PeakFileFormat_xpk",
		"Resonance",
		"ResonanceList",
		"StructureDependentPeakCalibrator",
		"StructureIndependentPeakCalibrator",
		"util",
	],
	"protocols/rbsegment_relax": [
		"AutoRBRelaxMover",
		"MakeStarTopology",
		"FragInsertAndAlignMover",
		"OptimizeThreading",
		"IdealizeHelices",
		"RBSegment",
		"RBSegmentMover",
		"RBSegmentRelax",
		"RBSegmentRelax_main",
		"util",
	],
	"protocols/surface_docking": [
		"CentroidRelaxMover",
		"FullatomRelaxMover",
		"SurfaceDockingProtocol",
		"SurfaceOrientMover",
		"SurfaceParameters",
		"SurfaceVectorLoader",
		"SurfaceVectorFallbackConfiguration",
		"SurfaceVectorOptions",
	],
	"protocols/symmetric_docking": [
		"SymDockBaseProtocol",
		"SymDockingHiRes",
		"SymDockingLowRes",
		"SymDockProtocol",
		"SymFoldandDockMoveRbJumpMover",
		"SymFoldandDockRbTrialMover",
		"SymFoldandDockSlideTrialMover",
		"SymRestrictTaskForDocking",
		"SymSidechainMinMover",
	],
	"protocols/topology_broker": [
		"AsymFoldandDockClaimer",
                "BasicJumpClaimer",
		"ClaimerMessage",
		"ConstraintClaimer",
		"ConstraintEvaluatorWrapper",
                "ConstraintEvaluatorWrapperCreator",
		"CoordConstraintClaimer",
		"CutBiasClaimer",
		"DensityScoringClaimer",
		"DisulfJumpClaimer",
		"FibrilModelingClaimer",
		"FoldandDockClaimer",
		"FragmentClaimer",
		"FragmentJumpClaimer",
		"LoopFragmentClaimer",
		"MembraneTopologyClaimer",
		"MetalloClaimer",
		"PcsEnergyController",
		"PseudocontactShiftEnergyController",
		"RigidChunkClaimer",
		"SequenceClaimer",
		"SequenceNumberResolver",
		"StartStructClaimer",
		"SymmetryClaimer",
		"TemplateFragmentClaimer",
		"TemplateJumpClaimer",
		"TopologyBroker",
		"TopologyClaimer",
		"TopologyClaimerFactory",
		"util",
	],
	"protocols/topology_broker/claims": [
		"DofClaim",
	],
}
include_path = [
]
library_path = [
]
libraries = [
]
subprojects = [
	"protocols_h.4",
	"protocols_g.4",
	"protocols.3",
	"protocols_a.2",
	"protocols.1",
	"core.5",
	"core.4",
	"core.3",
	"core.2",
	"core.1",
	"basic",
	"numeric",
	"utility",
	"ObjexxFCL",
	"z",
	"sqlite3",
	"cppdb",
]
