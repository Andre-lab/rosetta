// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file   rosetta/rosetta.dox
/// @brief  libRosetta Overview
/// @author Stuart G. Mentzer (Stuart_Mentzer@objexx.com)


/// @mainpage
///
/// libRosetta is a library of components used by the Rosetta application for
/// biomolecular structure prediction, docking, and design.  libRosetta replaces
/// procedural code dependent on many global arrays with a collection of modular
/// object-oriented components that are designed to simplify the addition of new
/// component types and to provide simple, clear interfaces to the molecular
/// components that Rosetta manipulates.  libRosetta is designed to be easy to use
/// and hard to misuse.
///
/// libRosetta is constructed from a set of layers that each play well-defined and
/// limited roles.  Currently it has chemical, conformation, and scoring layers,
/// where each layer sits on the previous layer and layers only use the layers below
/// them.  The chemical layer provides just tables of the fixed element and compound
/// atom types of interest.  The conformation layer has components for representing
/// a molecule's toplogy and positional state.
///
/// There are class hierarchies for the reprentation of molecular structures and the
/// components that make them up, such as atoms, bonds, amino acids, and proteins.
/// UML design diagrams included in the libRosetta documentation show the
/// inheritance and layer relationships between the classes.
///
/// A named key system is used to access molecular components by name.  New keys can
/// be added anywhere in key lists without breaking any code.  By using hidden
/// indexes in the keys the specially designed key-access containers (from the
/// utility library) provide the lookup speed of std::vector with syntactic
/// convenience of std::map.
///
/// Smart pointers (from the utility library) provide safe lifetime management with
/// lower overhead and convenient interfaces.  Smart pointers with ownership are
/// used only for collection members to assure that cycles causing memory leaks will
/// not occur.  The benefits of using the smart pointers we wrote in utility over
/// similar smart pointers from boost are that we provide a common interface for the
/// owning and non-owning pointers, we provide construction from references for
/// syntactic convenience, and we have tuned some operators to provide better
/// performance than boost.intrusive_ptr.
///
/// libRosetta uses components from the associated numeric, utility, and ObjexxFCL
/// libraries.
///
/// libRosetta will continue to extend to replace more Rosetta subsystems with
/// robust object-oriented components to provide more usability and reliability
/// benefits to the Rosetta research community.
///
///
/// @par Other libraries
/// 
/// - <a href="../../utility/html/index.html">Utility library</a>
/// - <a href="../../numeric/html/index.html">Numeric library</a>
/// - <a href="../../ObjexxFCL/html/index.html">ObjexxFCL library</a>


/// @namespace rosetta
///
/// @brief     Layered component library for developing Rosetta.
