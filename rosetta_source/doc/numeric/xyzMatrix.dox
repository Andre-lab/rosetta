// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file   numeric/xyzMatrix.dox
/// @brief  3x3 matrix template class
/// @author Frank M. D'Ippolito (Frank_DIppolito@objexx.com)
/// @author Stuart G. Mentzer (Stuart_Mentzer@objexx.com)


/// @class numeric::xyzMatrix
///
/// xyzMatrix is a fast 3x3 matrix template class.  Functions are inlined and loop-free
/// for optimal speed.  The destructor is declared non-virtual for speed so xyzMatrix
/// is not set up for use as a base class.  As a template class, xyzMatrix can hold
/// various value types.
///
/// Forward declarations and typedefs for common value types are provided in
/// the file xyzMatrix.fwd.hh.  This header should be included in files that
/// only use the names of the xyzMatrix types (e.g., function declarations and
/// functions that just pass the types through to other functions by pointer
/// or reference).
///
///
/// Common operations that are normally coded in loops are provided and include:
///
/// right_multiply_by() - Multiply on the right by an xyzMatrix
///
/// right_multiply_by_transpose() - Multiply on the right by the transpose of an xyzMatrix
///
/// left_multiply_by() - Multiply on the left by an xyzMatrix
///
/// left_multiply_by_transpose() - Multiply on the left by the transpose of an xyzMatrix
///
/// det() - Determinant
///
/// trace() - Trace
///
/// transpose() - Transpose
///
/// transposed() - Transposed copy
///
/// NOte that tranpose() and transposed() follow the library convention that the 'ed' version
/// does not modify the xyzMatrix, but generates an xyzMatrix.
///
///
/// xyzMatrix offers a number of construction methods including several column or row
/// oriented methods: from nine elements, from pointer(s) to contiguous values, or from
/// three xyzVectors.
///
/// Additionally, the header xyz_functions.hh contains common functions that interact with
/// xyzMatrix such as:
///
/// product() - xyzMatrix xyzVector product
///
/// inplace_product() - xyzMatrix xyzVector product, input xyzVector is modified
///
/// outer_product() - xyzVector xyzVector outer product
///
/// projection_matrix() - projection matrix onto the line through an xyzVector
///
/// rotation_matrix() - rotation matrix about a helical axis through the origin through an angle
///
/// rotation_axis() - transformation from rotation matrix to helical axis of rotation
///
/// eigenvalue_jacobi() - classic Jacobi algorithm for the eigenvalues of a real symmetric matrix
///
/// eigenvector_jacobi() - classic Jacobi algorithm for the eigenvalues and eigenvectors of a real symmetric matrix



// Types


/// @typedef numeric::xyzMatrix::Value
///
/// typedef  T  Value;


/// @typedef numeric::xyzMatrix::Vector
///
/// typedef  xyzVector< T >  Vector;



// Variables


/// @var numeric::xyzMatrix::xx_
///
/// @brief xx or ( 1, 1 ) element


/// @var numeric::xyzMatrix::xy_
///
/// @brief xy or ( 1, 2 ) element


/// @var numeric::xyzMatrix::xz_
///
/// @brief xz or ( 1, 3 ) element


/// @var numeric::xyzMatrix::yx_
///
/// @brief yx or ( 2, 1 ) element


/// @var numeric::xyzMatrix::yy_
///
/// @brief yy or ( 2, 2 ) element


/// @var numeric::xyzMatrix::yz_
///
/// @brief yz or ( 2, 3 ) element


/// @var numeric::xyzMatrix::zx_
///
/// @brief zx or ( 3, 1 ) element


/// @var numeric::xyzMatrix::zy_
///
/// @brief zy or ( 3, 2 ) element


/// @var numeric::xyzMatrix::zz_
///
/// @brief zz or ( 3, 3 ) element



// Creation


/// @fn numeric::xyzMatrix::xyzMatrix()
///
/// @brief Default constructor
/// @note  Values are uninitialized for efficiency


/// @fn numeric::xyzMatrix::xyzMatrix( xyzMatrix const & )
///
/// @brief Copy constructor


/// @fn numeric::xyzMatrix::xyzMatrix( xyzMatrix< U > const & )
///
/// @brief Copy constructor


/// @fn numeric::xyzMatrix::xyzMatrix( Value const & )
///
/// @brief Uniform value constructor


/// @fn numeric::xyzMatrix::clone() const
///
/// @brief Clone


/// @fn numeric::xyzMatrix::~xyzMatrix()
///
/// @brief Destructor



// Creation: special constructors


/// @fn numeric::xyzMatrix::diag( Value const &, Value const &, Value const & )
///
/// @brief Diagonal value named constructor
///
/// @param[in] xx_a   Value to assign to the xx_ data member
/// @param[in] yy_a   Value to assign to the yy_ data member
/// @param[in] zz_a   Value to assign to the zz_ data member
///
/// @note  diag refers to a diagonal matrix
///
/// @return           xyzMatrix with xx_a, yy_a, zz_a assigned to the diagonal, 0 to the off-diagonal elements


/// @fn numeric::xyzMatrix::diag( xyzVector< U > const & )
///
/// @brief Diagonal xyzVector named constructor
///
/// @param[in] diag_a xyzVector to assign to the diagonal of the xyzMatrix
///
/// @note  diag refers to a diagonal matrix
///
/// @return           xyzMatrix with diag_a assigned to the diagonal, 0 to the off-diagonal elements


/// @fn numeric::xyzMatrix::identity()
///
/// @brief Identity xyzMatrix named constructor
///
/// @note Can be faster than static member function I() for construction due to return value optimization



// Creation: column values


/// @fn numeric::xyzMatrix::cols( Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const & )
///
/// @brief Column-ordered value named constructor
///
/// @param[in] xx_a   Value to assign to the xx_ data member
/// @param[in] yx_a   Value to assign to the yx_ data member
/// @param[in] zx_a   Value to assign to the zx_ data member
/// @param[in] xy_a   Value to assign to the xy_ data member
/// @param[in] yy_a   Value to assign to the yy_ data member
/// @param[in] zy_a   Value to assign to the zy_ data member
/// @param[in] xz_a   Value to assign to the xz_ data member
/// @param[in] yz_a   Value to assign to the yz_ data member
/// @param[in] zz_a   Value to assign to the zz_ data member
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( xx_a, yx_a, zx_a,
/// @note						    xy_a, yy_a, zy_a,
/// @note						    xz_a, yz_a, zz_a ) )
/// @note  Assignment usage: m = xyzMatrix::cols( xx_a, yx_a, zx_a,
/// @note					  xy_a, yy_a, zy_a,
/// @note					  xz_a, yz_a, zz_a )
///
/// @return           xyzMatrix with arguments ordered column-wise



// Creation: column pointer(s)


/// @fn numeric::xyzMatrix::xyzMatrix( ColsPointer< U > const & )
///
/// @brief Pointer to contiguous column-ordered values constructor
/// @see   cols
///
/// @param[in] c      ColsPointer
///
/// @note  The cols named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( pointer ) )
/// @note  Assignment usage: m = xyzMatrix::cols( pointer )


/// @fn numeric::xyzMatrix::cols( U const * )
///
/// @brief Pointer to contiguous column-ordered values named constructor/assignment
/// @warning Danger! No way to check that argument points to nine contiguous values
///
/// @param[in] cp     Pointer to nine contiguous values
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( pointer ) )
/// @note  Assignment usage: m = xyzMatrix::cols( pointer )


/// @fn numeric::xyzMatrix::xyzMatrix( ColPointers< U > const & )
///
/// @brief Pointers to contiguous columns constructor
/// @see   cols
///
/// @param[in] c      ColPointers
///
/// @note  The cols named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( pointer, pointer, pointer ) )
/// @note  Assignment usage: m = xyzMatrix::cols( pointer, pointer, pointer )


/// @fn numeric::xyzMatrix::cols( U const *, U const *, U const * )
///
/// @brief Pointers to contiguous columns named constructor/assignment
/// @warning Danger! No way to check that arguments each point to three contiguous values
///
/// @param[in] xp     Pointer to x (first) column
/// @param[in] yp     Pointer to y (second) column
/// @param[in] zp     Pointer to z (third) column
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( pointer, pointer, pointer ) )
/// @note  Assignment usage: m = xyzMatrix::cols( pointer, pointer, pointer )


/// @fn numeric::xyzMatrix::cols_constructor( U const *, U const *, U const * )
///
/// @brief Pointers to contiguous columns named constructor
/// @warning Danger! No way to check that arguments each point to three contiguous values
///
/// @param[in] xp     Pointer to x (first) column
/// @param[in] yp     Pointer to y (second) column
/// @param[in] zp     Pointer to z (third) column
///
/// @note  Can be faster than cols() construction due to return value optimization
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols_constructor( pointer, pointer, pointer ) )



// Creation: column xyzVectors


/// @fn numeric::xyzMatrix::xyzMatrix( ColVectors< U > const & )
///
/// @brief Columns constructor
/// @see   cols
///
/// @param[in] c      ColVectors
///
/// @note  The cols named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( xyzVector, xyzVector, xyzVector ) )


/// @fn numeric::xyzMatrix::cols( xyzVector< U > const &, xyzVector< U > const &, xyzVector< U > const & )
///
/// @brief Column vectors named constructor/assignment
///
/// @param[in] col_x  x (first) column
/// @param[in] col_y  y (second) column
/// @param[in] col_z  z (third) column
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols( xyzVector, xyzVector, xyzVector ) )
/// @note  Assignment usage: m = xyzMatrix::cols( xyzVector, xyzVector, xyzVector )


/// @fn numeric::xyzMatrix::cols_constructor( xyzVector< U > const &, xyzVector< U > const &, xyzVector< U > const & )
///
/// @brief xyzVector columns named constructor
///
/// @param[in] col_x  x (first) column
/// @param[in] col_y  y (second) column
/// @param[in] col_z  z (third) column
///
/// @note  Can be faster than cols() construction due to return value optimization
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::cols_constructor( xyzVector, xyzVector, xyzVector ) )



// Creation: row values


/// @fn numeric::xyzMatrix::rows( Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const &, Value const & )
///
/// @brief Row-ordered value named constructor
///
/// @param[in] xx_a   Value to assign to the xx_ data member
/// @param[in] xy_a   Value to assign to the xy_ data member
/// @param[in] xz_a   Value to assign to the xz_ data member
/// @param[in] yx_a   Value to assign to the yx_ data member
/// @param[in] yy_a   Value to assign to the yy_ data member
/// @param[in] yz_a   Value to assign to the yz_ data member
/// @param[in] zx_a   Value to assign to the zx_ data member
/// @param[in] zy_a   Value to assign to the zy_ data member
/// @param[in] zz_a   Value to assign to the zz_ data member
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( xx_a, xy_a, xz_a,
/// @note						    yx_a, yy_a, yz_a,
/// @note						    zx_a, zy_a, zz_a ) )
/// @note  Assignment usage: m = xyzMatrix::rows( xx_a, xy_a, xz_a,
/// @note					  yx_a, yy_a, yz_a,
/// @note					  zx_a, zy_a, zz_a )
///
/// @return           xyzMatrix with arguments ordered row-wise



// Creation: row pointer(s)


/// @fn numeric::xyzMatrix::xyzMatrix( RowsPointer< U > const & )
///
/// @brief Pointer to contiguous row-ordered values constructor
/// @see   rows
///
/// @param[in] r      RowsPointer
///
/// @note  The rows named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( pointer ) )
/// @note  Assignment usage: m = xyzMatrix::rows( pointer )


/// @fn numeric::xyzMatrix::rows( U const * )
///
/// @brief Pointer to contiguous row-ordered values named constructor/assignment
/// @warning Danger! No way to check that argument points to nine contiguous values
///
/// @param[in] rp     Pointer to nine contiguous values
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( pointer ) )
/// @note  Assignment usage: m = xyzMatrix::rows( pointer )


/// @fn numeric::xyzMatrix::xyzMatrix( RowPointers< U > const & )
///
/// @brief Pointers to contiguous rows constructor
/// @see   rows
///
/// @param[in] r      RowPointers
///
/// @note  The rows named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( pointer, pointer, pointer ) )
/// @note  Assignment usage: m = xyzMatrix::rows( pointer, pointer, pointer )


/// @fn numeric::xyzMatrix::rows( U const *, U const *, U const * )
///
/// @brief Pointers to contiguous rows named constructor/assignment
/// @warning Danger! No way to check that arguments each point to three contiguous values
///
/// @param[in] xp     Pointer to x (first) row
/// @param[in] yp     Pointer to y (second) row
/// @param[in] zp     Pointer to z (third) row
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( pointer, pointer, pointer ) )
/// @note  Assignment usage: m = xyzMatrix::rows( pointer, pointer, pointer )


/// @fn numeric::xyzMatrix::rows_constructor( U const *, U const *, U const * )
///
/// @brief Pointers to contiguous rows named constructor
/// @warning Danger! No way to check that arguments each point to three contiguous values
///
/// @param[in] xp     Pointer to x (first) row
/// @param[in] yp     Pointer to y (second) row
/// @param[in] zp     Pointer to z (third) row
///
/// @note  Can be faster than rows() construction due to return value optimization
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows_constructor( pointer, pointer, pointer ) )



// Creation: row xyzVectors


/// @fn numeric::xyzMatrix::xyzMatrix( RowVectors< U > const & )
///
/// @brief Rows constructor
/// @see   rows
///
/// @param[in] r      RowVectors
///
/// @note  The rows named constructor/assignment provides a simple wrapper interface
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( xyzVector, xyzVector, xyzVector ) )


/// @fn numeric::xyzMatrix::rows( xyzVector< U > const &, xyzVector< U > const &, xyzVector< U > const & )
///
/// @brief Row vectors named constructor/assignment
///
/// @param[in] row_x  x (first) row
/// @param[in] row_y  y (second) row
/// @param[in] row_z  z (third) row
///
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows( xyzVector, xyzVector, xyzVector ) )
/// @note  Assignment usage: m = xyzMatrix::rows( xyzVector, xyzVector, xyzVector )


/// @fn numeric::xyzMatrix::rows_constructor( xyzVector< U > const &, xyzVector< U > const &, xyzVector< U > const & )
///
/// @brief xyzVector rows named constructor
///
/// @param[in] row_x  x (first) row
/// @param[in] row_y  y (second) row
/// @param[in] row_z  z (third) row
///
/// @note  Can be faster than rows() construction due to return value optimization
/// @note  Constructor usage: xyzMatrix m( xyzMatrix::rows_constructor( xyzVector, xyzVector, xyzVector ) )



// Methods: copy assignment


/// @fn numeric::xyzMatrix::operator =( xyzMatrix const & )
///
/// @brief Copy assignment
///
/// @param[in] m      xyzMatrix to assign to the xyzMatrix
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator =( xyzMatrix< U > const & )
///
/// @brief Copy assignment
///
/// @param[in] m      xyzMatrix to assign to the xyzMatrix
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator +=( xyzMatrix< U > const & )
///
/// @brief += xyzMatrix
///
/// @param[in] m      xyzMatrix to add to the xyzMatrix
///
/// @return           Reference to the xyzMatrix sum


/// @fn numeric::xyzMatrix::operator -=( xyzMatrix< U > const & )
///
/// @brief -= xyzMatrix
///
/// @param[in] m      xyzMatrix to subtract from the xyzMatrix
///
/// @return           Reference to the xyzMatrix difference


/// @fn numeric::xyzMatrix::operator *=( xyzMatrix< U > const & )
///
/// @brief *= xyzMatrix
///
/// @param[in] m      xyzMatrix to right multipy the xyzMatrix
///
/// @note  Same as right multiply by xyzMatrix
///
/// @return           Reference to the xyzMatrix product



// Methods: pointer assignment


/// @fn numeric::xyzMatrix::operator =( ColsPointer< U > const & )
///
/// @brief Assignment from pointer to contiguous column-ordered values
///
/// @param[in] c      ColsPointer wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::cols( pointer )
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator =( RowsPointer< U > const & )
///
/// @brief Assignment from pointer to contiguous row-ordered values
///
/// @param[in] r      RowsPointer wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::rows( pointer )
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator =( ColPointers< U > const & )
///
/// @brief Assignment from pointers to contiguous columns
///
/// @param[in] c      ColPointers wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::cols( pointer, pointer, pointer )
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator =( RowPointers< U > const & )
///
/// @brief Assignment from pointers to contiguous rows
///
/// @param[in] r      RowPointers wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::rows( pointer, pointer, pointer )
///
/// @return           Reference to the xyzMatrix



// Methods: xyzVector assignment


/// @fn numeric::xyzMatrix::operator =( ColVectors< U > const & )
///
/// @brief xyzVector columns assignment
///
/// @param[in] c      ColVectors wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::cols( xyzVector, xyzVector, xyzVector )
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator =( RowVectors< U > const & )
///
/// @brief xyzVector rows assignment
///
/// @param[in] r      RowVectors wrapper
///
/// @note  Use via named assignment wrapper: m = xyzMatrix::rows( pointer, pointer, pointer )
///
/// @return           Reference to the xyzMatrix



// Methods: scalar value assignment


/// @fn numeric::xyzMatrix::operator =( Value const & )
///
/// @brief = Value
///
/// @param[in] t      scalar to assign to each element
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator +=( Value const & )
///
/// @brief += Value
///
/// @param[in] t      scalar to add to each element
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator -=( Value const & )
///
/// @brief -= Value
///
/// @param[in] t      scalar to subtract from each element
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator *=( Value const & )
///
/// @brief *= Value
///
/// @param[in] t      scalar by which to multiply each element of the xyzMatrix
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::operator /=( Value const & )
///
/// @brief /= Value
///
/// @param[in] t      scalar by which to divide each element of the xyzMatrix
///
/// @return           Reference to the xyzMatrix



// Methods: complex mathematical


/// @fn numeric::xyzMatrix::to_identity()
///
/// @brief Set to the identity xyzMatrix
///
/// @return           Reference to the xyzMatrix


/// @fn numeric::xyzMatrix::to_diag( Value const &, Value const &, Value const & )
///
/// @brief Set to diagonal xyzMatrix from value
///
/// @param[in] xx_a   Value to assign to the xx_ data member
/// @param[in] yy_a   Value to assign to the yy_ data member
/// @param[in] zz_a   Value to assign to the zz_ data member
///
/// @note  Resets the entire matrix (diag refers to a diagonal matrix)
///
/// @return           Reference to the xyzMatrix with xx_a, yy_a, zz_a assigned to the diagonal, 0 to the off-diagonal elements


/// @fn numeric::xyzMatrix::to_diag( xyzVector< U > const & )
///
/// @brief Set to diagonal xyzMatrix from xyzVector
///
/// @param[in] diag_a xyzVector to assign to the diagonal of the xyzMatrix
///
/// @note  Resets the entire matrix (diag refers to a diagonal matrix)
///
/// @return           Reference to the xyzMatrix with diag_a assigned to the diagonal, 0 to the off-diagonal elements


/// @fn numeric::xyzMatrix::set_diagonal( Value const &, Value const &, Value const & )
///
/// @brief set diagonal of xyzMatrix from value
///
/// @param[in] xx_a   Value to assign to the xx_ data member
/// @param[in] yy_a   Value to assign to the yy_ data member
/// @param[in] zz_a   Value to assign to the zz_ data member
///
/// @note  Resets the diagonal of the matrix only (diagonal refers to diagonal entries of a matrix)
///
/// @return           Reference to the xyzMatrix with diagonal reset to xx_a, yy_a, zz_a, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::set_diagonal( xyzVector< U > const & )
///
/// @brief Set diagonal of xyzMatrix from xyzVector
///
/// @param[in] diag_a xyzVector to assign to the diagonal of the xyzMatrix
///
/// @note  Resets the diagonal of the matrix only (diagonal refers to diagonal entries of a matrix)
///
/// @return           Reference to the xyzMatrix with diagonal reset to diag_a, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::add_diagonal( Value const &, Value const &, Value const & )
///
/// @brief Add values to diagonal of xyzMatrix
///
/// @param[in] xx_a   Value to add to the xx_ data member
/// @param[in] yy_a   Value to add to the yy_ data member
/// @param[in] zz_a   Value to add to the zz_ data member
///
/// @return           Reference to the xyzMatrix with ( xx_a, yy_a, zz_a ) added to diagonal, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::add_diagonal( xyzVector< U > const & )
///
/// @brief Add xyzVector to diagonal of xyzMatrix
///
/// @param[in] diag_a xyzVector to add to the diagonal of the xyzMatrix
///
/// @return           Reference to the xyzMatrix with diag_a added to diagonal, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::subtract_diagonal( Value const &, Value const &, Value const & )
///
/// @brief Subtract values from diagonal of xyzMatrix
///
/// @param[in] xx_a   Value to add to the xx_ data member
/// @param[in] yy_a   Value to add to the yy_ data member
/// @param[in] zz_a   Value to add to the zz_ data member
///
/// @return           Reference to the xyzMatrix with ( xx_a, yy_a, zz_a ) subtracted from diagonal, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::subtract_diagonal( xyzVector< U > const & )
///
/// @brief Subtract xyzVector from diagonal of xyzMatrix
///
/// @param[in] diag_a xyzVector to subtract from the diagonal of the xyzMatrix
///
/// @return           Reference to the xyzMatrix with diag_a subtracted from diagonal, off-diagonal elements unchanged


/// @fn numeric::xyzMatrix::transpose()
///
/// @brief Transpose
///
/// @return           Reference to the xyzMatrix with elements transposed.


/// @fn numeric::xyzMatrix::right_multiply_by( xyzMatrix< U > const & )
///
/// @brief Right multiply by xyzMatrix
///
/// @param[in] m      xyzMatrix to right multipy the xyzMatrix
///
/// @note  Same as *= xyzMatrix
///
/// @return           Reference to the xyzMatrix product


/// @fn numeric::xyzMatrix::right_multiply_by_transpose( xyzMatrix< U > const & )
///
/// @brief Right multiply by transpose xyzMatrix
///
/// @param[in] m      xyzMatrix to transpose and right multipy the xyzMatrix
///
/// @return           Reference to the xyzMatrix product


/// @fn numeric::xyzMatrix::left_multiply_by( xyzMatrix< U > const & )
///
/// @brief Left multiply by xyzMatrix
///
/// @param[in] m      xyzMatrix to left multipy the xyzMatrix
///
/// @note  Same as *= xyzMatrix
///
/// @return           Reference to the xyzMatrix product


/// @fn numeric::xyzMatrix::left_multiply_by_transpose( xyzMatrix< U > const & )
///
/// @brief Left multiply by transpose xyzMatrix
///
/// @param[in] m      xyzMatrix to transpose and left multipy the xyzMatrix
///
/// @return           Reference to the xyzMatrix product


/// @fn numeric::xyzMatrix::I()
///
/// @brief Identity xyzMatrix for expressions
///
/// @note  I_constructor() named constructor can be faster for construction
/// @note  Returns reference to static local object so can be used in construction of global objects
///
/// @return          Reference to identity xyzMatrix



// Properties: calculated


/// @fn numeric::xyzMatrix::det() const
///
/// @brief Determinant
///
/// @return          Determinant of xyzMatrix (scalar)


/// @fn numeric::xyzMatrix::trace() const
///
/// @brief Trace
///
/// @return          Trace of xyzMatrix (scalar)


/// @fn numeric::xyzMatrix::transposed() const
///
/// @brief Transposed copy
///
/// @return          Transposed copy of xyzMatrix



// Examples


/// @example
///
/// <ol>
/// <li>
/// To use the xyzMatrix types in a function you would normally put a using
/// declaration at the top of the function and then use the short typedef
/// name to declare the objects:
///
/// <pre>
/// void
/// f()
/// {
///   using numeric::xyzMatrix_double;
///
///  xyzMatrix_double m;        // Default constructed (uninitialized)
///  xyzMatrix_double n( 0.0 ); // Constructs n = ( 0.0, 0.0, 0.0
///                                                 0.0, 0.0, 0.0
///                                                 0.0, 0.0, 0.0 )
///
///  ...
///  n.xx() = 1.5; // Elements can be accessed as xx(), xy(), xz(),
///                                               yx(), yy(), yz()
///                                               zx(), zy(), and zz()
/// }
/// </pre>
///
/// Additionally, the columns and rows of an xyzMatrix can be accessed or
/// assigned by name or by 1-based index:
///
/// <pre>
/// col_x(), col_y(), col_z(), col( i ) i = 1, 2, 3;
/// row_x(), row_y(), row_z(), row( i ) i = 1, 2, 3;
/// </pre>
///
/// You can use numeric::xyzMatrix in loops by accessing the elements by index:
///
/// <pre>
///  m( i, j ); // For rows i = 1, 2, 3 and columns j = 1, 2, 3
///                (1-based indexing for xyzMatrix )
/// </pre>
/// </li>
///
///
/// <li>
/// You can construct a numeric::xyzMatrix from nine values representing
/// the entries of the matrix.
///
/// Note that orientation of the elements is specified by a named constructor:
///
/// <pre>
///  .// Construction from column-ordered values:
///  xyzMatrix_double m( xyzMatrix_double::cols( xx_a, yx_a, zx_a,
///                                              xy_a, yy_a, zy_a,
///                                              xz_a, yz_a, zz_a ) )
///
///  .// Assignment from column-ordered values:
///  xyzMatrix_double m;
///  ...
///  m = xyzMatrix_double::cols( xx_a, yx_a, zx_a,
///                              xy_a, yy_a, zy_a,
///                              xz_a, yz_a, zz_a );
///
///  .// Construction from row-ordered values:
///  xyzMatrix_double m( xyzMatrix_double::rows( xx_a, yx_a, zx_a,
///                                              xy_a, yy_a, zy_a,
///                                              xz_a, yz_a, zz_a ) )
///
///  .// Assignment from row-ordered values:
///  xyzMatrix_double m;
///  ...
///  m = xyzMatrix_double::rows( xx_a, yx_a, zx_a,
///                              xy_a, yy_a, zy_a,
///                              xz_a, yz_a, zz_a );
/// </pre>
/// </li>
///
///
/// <li>
/// You can construct a numeric::xyzMatrix from the address of the first
/// value in a contiguous data structure like an FArray or std::vector.
///
/// Note that orientation of the elements is specified by a named constructor:
///
/// <pre>
/// .// Construction from a pointer to contiguous column-ordered values:
/// xyzMatrix_double m( xyzMatrix_double::cols( pointer ) );
///
/// .// Assignment from a pointer to contiguous column-ordered values:
/// xyzMatrix_double m;
///  ...
/// m = xyzMatrix_double::cols( pointer );
///
/// .// Construction from a pointer to contiguous row-ordered values:
/// xyzMatrix_double m( xyzMatrix_double::rows( pointer ) );
///
/// .// Assignment from a pointer to contiguous row-ordered values:
/// xyzMatrix_double m;
/// ...
/// m = xyzMatrix_double::rows( pointer );
/// </pre>
/// </li>
///
///
/// <li>
/// You can construct a numeric::xyzMatrix from three addresses, each pointing to
/// the first value in a contiguous data structure like an FArray or std::vector.
///
/// Note that orientation of the elements is specified by a named constructor:
///
/// <pre>
///  .// Construction from three pointers to contiguous columns:
///  xyzMatrix_double m( xyzMatrix_double::cols( pointer, pointer, pointer ) );
///
///  .// Assignment from three pointers to contiguous columns:
///  xyzMatrix_double m;
///  ...
///  m = xyzMatrix_double::rows( pointer, pointer, pointer );
///
///  .// Construction from three pointers to contiguous rows:
///  xyzMatrix_double m( xyzMatrix_double::cols( pointer, pointer, pointer ) );
///
///  .// Assignment from three pointers to contiguous rows:
///  xyzMatrix_double m;
///  ...
///  m = xyzMatrix_double::rows( pointer, pointer, pointer );
/// </pre>
/// </li>
/// </ol>
