// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.
/// @page using_scons A Guide to Using SCons to Build Rosetta
///
///This Page in Under Construction
/// @brief  A Guide to Using SCons to Build Rosetta
/// @author Kristian Kaufmann
///
/// last modified: 11/08/2008
///
///Rosetta uses a custom SCons builder. The builder allows multiple build configurations. This page \ref UsingScons demonstrates some simple features of the build system followed by a more detailed discussion of the build system structure and how it can be extended.
///
///Note that scons-local is packaged with Rosetta3. Thus if scons is not installed on your system replace all the folllowing "scons" calls with "python external/scons-local/scons.py"
///
///@section Building
///In order to build a debug version of the mini-rosetta executables, simply run
///scons like this:
///
/// <code>
///scons bin
/// </code>
///
///In order to build release executables, add the flag 'mode=release' like this:
///
/// <code>
///scons bin mode=release
/// </code>
///
///To display more rosetta specific build options call
///scons -h
///To display general scons build options call
///scons -H
///
///@section additional_build_setup Additional Build Environment Options
///
///Automatic location of other compilers (assuming they are already in
///your path) such as Intel C/C++ may be enabled by uncommenting the
///"program_path" line in 'tools/build/user.settings'.
///
///A user can restrict compilation of the the devel and pilot_apps. On issuing
///the call
///
/// <code>
///scons bin my
/// </code>
///
///or
///
/// <code>
///scons bin my_pilot_apps
/// </code>
///
///SCons will read from src/devel.src.settings and src/pilot_apps.src.settings
///rather than src/devel.src.settings.all and src/pilot_apps.src.settings.all
///This cuase SCons to build only the sources listed in src/devel.src.settings
///and src/pilot_apps.src.settings with the needed dependencies.
///
///@section common_build_calls Common build calls that may be useful
///Build the default projects with default settings (debug mode, shared libraries)
///
/// <code>
///	scons
/// </code>
///
///Build the target <project> with default settings
///
/// <code>
/// scons <project>
/// scons core
/// scons protocols
/// </code>
///
///
/// Build only the sources of <project> in <subdirectory>
///
/// <code>
/// scons <project>/<subdirectory>
/// scons core/chemical
/// </code>
///
/// Build only <objectfile>. Note that the extension is "os" for a shared object. For a static build this would "o".
///
/// <code>
/// scons <project>/<path/<objectfile>
/// scons protocols/rna/RNA_ProtocolUtil.os
/// </code>
///
/// Build and install executables in bin/ directory
///
/// <code>
/// scons bin
/// </code>
///
/// Build and install executables in bin/ directory if current working directory is a sub-directory mini. -D options tells scons to iteratively search towards the root for SConstruct file. The # sign is an alias for the top build directory.
///
/// <code>
/// scons -D #bin
/// </code>
///
/// Build all pilot_apps listed in src/pilot_apps.src.settings.all and sources in src/devel.src.settings as well as the core, numeric and utility libraries
///
/// <code>
/// scons bin
/// scons bin pilot_apps_all
/// </code>
///
/// Build restricted set of pilot_apps and devel sources listed in src/pilot_apps.src.settings.my and src/devel.src.settings.my
///
/// <code>
/// scons bin my
/// scons bin my_pilot_apps
/// </code>
///
///	Build and install a particular executable in the bin directory
///
/// <code>
/// scons bin/exec
/// scons bin/benchmark.linuxgccdebug
/// scons mode=release bin/benchmark.linuxgccrelease
/// </code>
///
/// Build in release mode (~10x faster executable)
///
/// <code>
/// scons mode=release
/// </code>
///
/// Build static libraries and exectuables instead of shared libraries.
///
/// <code>
///	scons extras=static
/// </code>
///
/// Build and run unit tests. (Note the sources must be built first.)
///
/// <code>
/// scons cat=test
/// python test/run.py
/// </code>
///
/// Parallelize build into 3 threads (faster on multiproc. machine). In fact some source recommend starting twice as many threads as available processors (Not quite sure this makes sense or a difference).
///
/// <code>
/// scons -j3
/// </code>
///
/// Use the version of scons that is distributed with mini. Useful for when scons is not installed on system
///
/// <code>
///	python external/scons-local/scons.py
/// </code>
///
