// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.
/// @author Kristian Kaufmann
///
/// last modified: 11/08/2008
///
/// @page a_guide_to_developing_in_rosetta A Guide to Developing in Rosetta
///
/// This guide is under construction. Some of the pages are pretty useful others still need a lot of work.
///
///@section overview Overview
///This guide is written to introduce a new developer to useful tools and expected practices while developing Rosetta. This guide does not provide instruction on programming in C++. See other sources for guidance in learning C++. This guide walks the reader through
/// - @ref subversion
/// - @ref navigating
/// - @ref app_development
/// - @ref Documenting_your_code
/// - @ref compiling
/// - @ref running_tests
/// - @ref checkin_code
///@section subversion Using subversion the version control system
/// @ref using_subversion included in this manual contains a subset of these commands introduced in an order which might be needed for a new developer. Subversion is a widely used easy to leard version control system. For an in depth view into subversion see the subversion manual online at http://svnbook.red-bean.com. Several svn clients have been developed including some very easy to use graphical user interfaces see http://subversion.tigris.org/links.html#clients. The RosettaWiki @ref https://wiki.rosettacommons.org/index.php/Tools:Subversion contains an extensive page on using subversion with several examples for many subversion commands.
///
///@section navigating Navigating the Rosetta library structure
/// The rosetta library contains five top level directories of which every developer should be aware.
///More detailed descriptions of each of these directories can be found on \ref rosetta_library_structure and subsequently links.
/// - src/ The src directory contains all the source files for the rosetta library.
/// - test/ The test directory contains source files and scripts for unit, integration, and scientific tests used to verify that the rosetta library is functioning correctly.
/// - bin/ The bin directory contains soft links to all the rosetta applications.
/// - tools/ The tools directory contains the files for the custom SCons Builder for the rosetta library.
/// - demo/ The demo directory is intended to contains files for running test case or demo of  particular applications.
///@section app_development Writing a simple application and documenting the code using Doxygen.
///One of the main design goals of Rosetta is that writing new applications and extension of existing protocols be easy. This section is intended to show a developer how to write new application with a new protocol. The reader will be taken through the process
/// - writing a new Mover
/// - writing a new application using the Job Distributor and the new Mover.
///
///After reading the page \ref writing_an_app the reader should be able to write their own Rosetta application.
///@section Documenting_your_code Documenting with Doxygen
///Rosetta uses Doxygen to produce documentation. @ref doxygen_tips provides useful information for making the most of Doxygen
///
///@section compiling Compiling the Rosetta library and application using SCons
/// \ref using_scons demonstrates some simple features of the build system followed by a more detailed discussion of the build system structure and how it can be extended. Rosetta uses a custom SCons builder. The builder allows multiple build configurations.
/// @section running_tests Running and Writing Unit, Integration, Performance, and Scientific Tests
/// \ref rosetta_tests takes the reader through the running each of these test sets and writing of a test in each of these categories. Rosetta has 4 sets of tests. Unit tests check particular functions of the Rosetta library. Integration tests track behavior of applications one individual cases. Performance tests monitor speed of Rosetta applications. Scientific tests monitor the behavior of Rosetta applications on a larger scale than Integration tests and with scientifically defined objectives.
///@section checkin_code Procedures for successfully checkin in your code without breaking the build or Unit and Integration tests.
/// The linked page is very terse but basically accurate. It will be expanded overtime. \ref before_commit_check is intended to show the reader steps that minimize the chance of a commit breaking the build or tests. Commiting your code to the trunk of Rosetta can be a perilous process almost every Rosetta developer that I know has commited code that broke Rosetta at one time or another.
