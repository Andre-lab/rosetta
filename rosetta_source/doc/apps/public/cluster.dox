// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.
// (C) 199x-2009 University of Washington
// (C) 199x-2009 University of California Santa Cruz
// (C) 199x-2009 University of California San Francisco
// (C) 199x-2009 Johns Hopkins University
// (C) 199x-2009 University of North Carolina, Chapel Hill
// (C) 199x-2009 Vanderbilt University

/*!

@page cluster_commands Commands for the cluster application

@section metadata Metadata
This document was edited May 25th 2010 by Mike Tyka. This application in mini was created and documented by Mike Tyka,et al.

@section purpose_algorithm  Purpose and Algorithm
The "cluster" application in Rosetta carries out a simple clustering of structures (either PDB or silent file format).
The algorithm is based on one of Phil Bradley's old programs (silent_cluster_c). Starting with a subset of structures
(the first 400 structures) the algorithm finds the structure with the largest number of neighbors within the cluster radius
and creates a first cluster with that structure as the clsuter center and the neighbors part of and claimed by the cluster.
The structures are removed from the pool of "unclaimed" structures. THe algorithm is then repeated untill all structures are assigned a cluster.
The remaineder of structures are then assigned to clusters (this avoids having to calculate a full rms matrix) one by one. THe rule is that any structure joins the cluster to who's 
cluster center it is most similar to. If the closest cluster is more then "cluster_radius" away the structure will form a new cluster.
This rule is applied to all remaining structures.
Clusters can be size limited, sorted by energy etc.. (see options)

@section commands Command lines
*Sample command* 
@verbatim
cluster.linuxgccrelease @flags > cluster.log
@endverbatim
Icluster can take all general file IO options common to all Rosetta applications
@verbatim
   -database                 Path to minirosetta databases
   -in:file:s                Input pdb file(s)  
   -in:file:silent           Input silent file
   -in:file:fullatom         Read as fullatom input structure
   -out:file:silent          Output silent structures instead of PDBs 
   -score:weights            Supply a different weights file (default is score12)
   -score:patch              Supply a different patch file (default is score12)
   -run:shuffle              Use shuffle mode
   -nstruct                  Make how many decoys per input structure ?
@endverbatim

Options specific to cluster
@verbatim
   -cluster:radius  <float>                    Cluster radius in A (for RMS clustering) or in inverse GDT_TS for GDT clustering. Use "-1" to trigger automatic radius detection
   -cluster:gdtmm                              Cluster by gdtmm instead of rms
   -cluster:input_score_filter  <float>        Ignore structures above certain energy 
   -cluster:exclude_res <int> [<int> <int> ..] Exclude residue numbers from structural comparisons              
   -cluster:radius        <float>              Cluster radius
   -cluster:limit_cluster_size      <int>      Maximal cluster size
   -cluster:limit_clusters          <int>      Maximal number of clusters
   -cluster:limit_total_structures  <int>      Maximal number of structures in total
   -cluster:sort_groups_by_energy              Sort clusters by energy.

Examples: 
cluster -database ~/minirosetta_database -in:file:silent silent.out -in::file::binary_silentfile -in::file::fullatom -native 1a19.pdb 
clustered Poses are given output names in the form of:
c.i.j, which denotes the jth member of the ith cluster.

@endverbatim


*/

