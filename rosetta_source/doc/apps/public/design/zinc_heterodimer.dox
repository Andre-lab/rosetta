// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author DOCUMENTATION AUTHOR GOES HERE
/*!

@page zinc_heterodimer_design Documentation for zinc_heterodimer_design application

@section metadata Metadata
Last updated on 12-12-12, Bryan Der (bder@email.unc.edu), Kuhlman lab (bkuhlman@email.unc.edu).

@section code_demos Code and Demo
Code for this application is in src/apps/public/design/zinc_heterodimer_design (setup and driver) and src/protocols/metal_interface/ZincHeterodimerMover (mover).  The integration test is called zinc_heterodimer.

@section refs References
unpublished protocol

@section purpose Purpose
This protocol designs zinc-mediated heterodimers.  One partner contains a three-residue zinc binding site, the second partner contains one surface zinc-coordinating residue.  In the example given, partner 2 is ubiquitin, which contains a surface histidine.

@section algorithm Algorithm
Prior to running this protocol, RosettaMatch is used to design three-residue zinc sites on a protein surface.  Next, the target protein containing a surface histidine (Ubq-H68) is docked to the open coordination site of zinc.  The ubiquitin rigid-body orientation to the designed zinc-binding scaffold is sampled as if the ubiquitin were a giant protein-sized rotamer.  This is done using inverse-rotamer sampling of Ubq-H68 chi1 and chi2 angles (SidechainMover), as well as free rotation about the His68-zinc coordination axis (RotateJumpAxisMover).  There is a centroid phase that evaluates overall shape complementarity of the target and scaffold, this phase is coupled to a full-atom pose to remember the conformation of the zinc coordinating residues.

@limits Limitations
The lowest-scoring centroid pose is the only pose that enters into full-atom interface design.  Perhaps a better way to do it would be to design every non-clashing backbone orientation.  There is no backbone minimization or sampling in this protocol.  The zinc site remains fixed during interface design.

@modes Modes
The biggest difference in 'mode' is whether or not you want to output all of the rigid-body perturbed structures for viewing/debugging.  See command-line options.

@section inputs Input Files
Just PDBs.

@li Common file types (loop file, fragment files, etc) will be described in a common place; link to those documents with the ATref command.
@li Target PDB (wild-type)
@li Scaffold PDB (wild-type)
@li match PDB from RosettaMatch of the scaffold.  Contains three zinc-coordinating residues and a 'transition state' histidine that will be replaced by the target histidine.

@section ft_options Options

These values are for production runs.

-resfile resfile  #the resfile default is NATAA, this will prevent mutation of the wild-type target.  For the scaffold, all residues should be NOTAA HC.
-nstruct 100
-partner1 2D4X.pdb
-partner2 1UBQ.pdb
-partner2_residue 68
-match_pdb 2D4X.C135-C137-H192_match_00161.pdb
-skip_sitegraft_repack false  #the local region surrounding the zinc match residues is repacked by default.
#-AnchoredDesign::perturb_temp
-AnchoredDesign::perturb_cycles 500 #how many times to perturb the rigid-body orientation
-AnchoredDesign::perturb_show false #true for debugging/visualization of rigid-body sampling
-AnchoredDesign::refine_cycles 10 #how many times to run PackRotamersMover

@section tips Tips

@section outputs Expected Outputs
The expected output is a heterocomplex containing: target protein, zinc, zinc binding site, designed scaffold.  If the pertub_show option is used, you'll see PDBs from each rigid-body sampling step.  The log file will show you how many times SidechainMover or RotateJumpAxisMover were called, and whether the MonteCarlo move was accepted or rejected.  The end of the log file prints a table of energies.

@section postprocess Post Processing
After running the protocol, the best way to evaluate designs is by computed binding energy using InterfaceAnalyzer (specify a jumpnum of 2).  Take a look at the zinc site to make sure that 4-residue coordination (3-by-1) is intact.

@section new_stuff New things since last release
If you've made improvements, note them here.

*/
