// -*- mode:c++;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t -*-
// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

///@author Jared Adolf-Bryfogle
/*!

@page RosettaFlagFileBuilder Documentation for the Rosetta Flag File Builder GUI

@section metadata Metadata
@section metadata Metadata
This document was last updated December 2012, by Jared Adolf-Bryfogle <jadolfbr@gmail.com>.
The PI for this application is Roland Dunbrack <Roland.Dunbrack@fccc.edu>

The application was developed by:
@li Jared Adolf-Bryfogle

@section code_demos Code and Demo
The code is available in rosetta_source/GUIs/RosettaFlagBuilder
To run the GUI use ./RosettaFlagBuilder.py in the code directory.

The DoxygenParser class is available in rosetta_source/GUIs/pyrosetta_toolkit/modules

@section refs References
Refs in Publication

@section purpose Purpose
The purpose of this GUI is to help running, exploring, and building flag files for Rosetta applications.
It is useful for exploring both documentation and available options and default settings of the many Rosetta applications.

@section algorithm Algorithm
This GUI parses Rosetta Doxygen documentation and the -help flag for each application.

@limits Limitations

This application attempts to help in formatting a Rosetta flag file and exploring documentation.  However, numerous applications have special formatting for Doxygen documention, including embeded HTML.
Efforts are under way to standardize and better parse the formatting, but please refer to rosettacommons for full production runs.

@modes Modes

@subsection main_window Main Window

@subsection path_builder Path Builder

@subsection qsub_gui Qsub Cluster Setup GUI


@section inputs Input Files
If there are any special input file types, describe them here.
@li Common file types (loop file, fragment files, etc) will be described in a common place; link to those documents with the ATref command.
@li Uncommon and app-specific file types should be described here.
@li Link to (or at least give paths to) examples of each from your integration test/demo.
@li Mention what you expect the input structure to be: if it's loop modeling, does the loop need to be present, or will it build from scratch?  If it's ligand binding, does there need to be a copy of the ligand in the input structure?

@section tips Tips
To get all available options given to a particular app, choose Repopulate->x
This overwhelms the Tk GUI, but can be useful if you want to go off the beaten path. For an individual app that is selected, you can click x.
QsubClusterSetup app works on all apps.  However, running Rosetta in MPI mode is recommended over using batch processing using Qsub.  If you can get MPI to work on your cluster, use it instead.
QsubClusterSetup is made to be applicable to all apps and all clusters.  If you find it does not work for yours, please report it on the bugtracker.


Describe how to get the best use out of the protocol.  Does it not require constraints, but work better with them?  Do you need to remember -ex1 -ex2 to get much out of it?

@section outputs Expected Outputs
What does your protocol produce?  Usually it will be just a PDB and a scorefile, but note if there should be more.  Note what the normal exit status of the protocol is (for example, "You'll see the jd2 x jobs completed in y seconds message if successfully completed".)

@section postprocess Post Processing
What post processing steps are typical?  Are score vs RMSD plots useful?  Are structures clustered (if so, give a command line)?  Is it obvious when either the application has succeeded or if it has failed (e.g. if the protocol makes predictions like "This is the docked conformation of proteins A and B").  In the case of designs, how should designs be selected?

@section new_stuff New things since last release
If you've made improvements, note them here.

*/
