inline Real sqr(Real x) { return x*x; }

inline Real sigmoid( Real const & sqdist, Real const & start, Real const & stop ) {
  if( sqdist > stop*stop ) {
    return 0.0;
  } else if( sqdist < start*start ) {
    return 1.0;
  } else {
    Real dist = sqrt( sqdist );
    return sqr(1.0  - sqr( (dist - start) / (stop - start) ) );
  }
}

std::set<int> CONTACTS;

Real
sicfast(
	vector1<Vec> const & pa,
	vector1<Vec> const & pb,
	vector1<Vec> const & cba,
	vector1<Vec> const & cbb,
	Real & cbcount
) {
	Real const CONTACT_D2 = sqr(basic::options::option[basic::options::OptionKeys::cxdock::contact_dis]());
	Real const BIN        =     basic::options::option[basic::options::OptionKeys::cxdock::clash_dis]()/2.0;
	// get bounds for plane hashes
	Real xmx1=-9e9,xmn1=9e9,ymx1=-9e9,ymn1=9e9,xmx=-9e9,xmn=9e9,ymx=-9e9,ymn=9e9;
	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
		xmx1 = max(xmx1,ia->x()); xmn1 = min(xmn1,ia->x());
		ymx1 = max(ymx1,ia->y()); ymn1 = min(ymn1,ia->y());
	}
	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
		xmx = max(xmx,ib->x()); xmn = min(xmn,ib->x());
		ymx = max(ymx,ib->y()); ymn = min(ymn,ib->y());
	}
	xmx = min(xmx,xmx1); xmn = max(xmn,xmn1);
	ymx = min(ymx,ymx1); ymn = max(ymn,ymn1);
	
	
	int xlb = (int)floor(xmn/BIN)-2; int xub = (int)ceil(xmx/BIN)+2; // one extra on each side for correctness,
	int ylb = (int)floor(ymn/BIN)-2; int yub = (int)ceil(ymx/BIN)+2; // and one extra for outside atoms
	
	// insert points into hashes
	int const xsize = xub-xlb+1;
	int const ysize = yub-ylb+1;
	ObjexxFCL::FArray2D<Vec> ha(xsize,ysize,Vec(0,0,-9e9)),hb(xsize,ysize,Vec(0,0,9e9));
	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
	  // int const ix = min(xsize,max(1,(int)ceil(ia->x()/BIN)-xlb));
	  // int const iy = min(ysize,max(1,(int)ceil(ia->y()/BIN)-ylb));
	  int const ix = (int)ceil(ia->x()/BIN)-xlb;
	  int const iy = (int)ceil(ia->y()/BIN)-ylb;
	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
	  if( ha(ix,iy).z() < ia->z() ) ha(ix,iy) = *ia;
	}
	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
	  // int const ix = min(xsize,max(1,(int)ceil(ib->x()/BIN)-xlb));
	  // int const iy = min(ysize,max(1,(int)ceil(ib->y()/BIN)-ylb));
	  int const ix = (int)ceil(ib->x()/BIN)-xlb;
	  int const iy = (int)ceil(ib->y()/BIN)-ylb;
	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
	  if( hb(ix,iy).z() > ib->z() ) hb(ix,iy) = *ib;
	}
	
	// check hashes for min dis
	int imna=0,jmna=0,imnb=0,jmnb=0;
	Real mindis = 9e9;
	for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
	  for(int j = 1; j <= ysize; ++j) {
	 	 for(int k = -2; k <= 2; ++k) {
	 		 if(i+k < 1 || i+k > xsize) continue;
	 		 for(int l = -2; l <= 2; ++l) {
	 			 if(j+l < 1 || j+l > ysize) continue;
	 			 Real const xa = ha(i	,j	).x();
	 			 Real const ya = ha(i	,j	).y();
	 			 Real const xb = hb(i+k,j+l).x();
	 			 Real const yb = hb(i+k,j+l).y();
	 			 Real const d2 = (xa-xb)*(xa-xb) + (ya-yb)*(ya-yb);
	
	 			 if( d2 < BIN*BIN*4.0 ) {
	 				 Real dz = hb(i+k,j+l).z() - ha(i,j).z() - sqrt(BIN*BIN*4.0-d2);
	 				 if( dz < mindis ) {
	 					 mindis = dz;
	 					 imna = i;
	 					 jmna = j;
	 					 imnb = i+k;
	 					 jmnb = j+l;
	 				 }
	 			 }
	 		 }
	 	 }
	  }
	}
	cbcount = 0.0;
	for(vector1<Vec>::const_iterator ia = cba.begin(); ia != cba.end(); ++ia) {
	  for(vector1<Vec>::const_iterator ib = cbb.begin(); ib != cbb.end(); ++ib) {
	 	 if( ib->distance_squared( (*ia + (mindis*Vec(0,0,1)) ) ) < CONTACT_D2 ) {
	 		 cbcount += 1.0;
	 	 }
	  }
	}
	return mindis;
}


Real
sicfast_hb(
	vector1<Vec> const & pa,
	vector1<Vec> const & pb,
	vector1<Vec> const & cba,
	vector1<Vec> const & cbb,
	vector1<int> const & don,
	vector1<int> const & acc,
	Real & cbcount,
	Real & hbcount
) {
	Real const CONTACT_D2 = sqr(basic::options::option[basic::options::OptionKeys::cxdock::contact_dis]());
	Real const BIN        =     basic::options::option[basic::options::OptionKeys::cxdock::clash_dis]()/2.0;
	Real const HB_DIS2    = sqr(basic::options::option[basic::options::OptionKeys::cxdock::hb_dis]());
	// get bounds for plane hashes
	Real xmx1=-9e9,xmn1=9e9,ymx1=-9e9,ymn1=9e9,xmx=-9e9,xmn=9e9,ymx=-9e9,ymn=9e9;
	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
		xmx1 = max(xmx1,ia->x()); xmn1 = min(xmn1,ia->x());
		ymx1 = max(ymx1,ia->y()); ymn1 = min(ymn1,ia->y());
	}
	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
		xmx = max(xmx,ib->x()); xmn = min(xmn,ib->x());
		ymx = max(ymx,ib->y()); ymn = min(ymn,ib->y());
	}
	xmx = min(xmx,xmx1); xmn = max(xmn,xmn1);
	ymx = min(ymx,ymx1); ymn = max(ymn,ymn1);
	
	
	int xlb = (int)floor(xmn/BIN)-2; int xub = (int)ceil(xmx/BIN)+2; // one extra on each side for correctness,
	int ylb = (int)floor(ymn/BIN)-2; int yub = (int)ceil(ymx/BIN)+2; // and one extra for outside atoms
	
	// insert points into hashes
	int const xsize = xub-xlb+1;
	int const ysize = yub-ylb+1;
	ObjexxFCL::FArray2D<Vec> ha(xsize,ysize,Vec(0,0,-9e9)),hb(xsize,ysize,Vec(0,0,9e9));
	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
	  // int const ix = min(xsize,max(1,(int)ceil(ia->x()/BIN)-xlb));
	  // int const iy = min(ysize,max(1,(int)ceil(ia->y()/BIN)-ylb));
	  int const ix = (int)ceil(ia->x()/BIN)-xlb;
	  int const iy = (int)ceil(ia->y()/BIN)-ylb;
	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
	  if( ha(ix,iy).z() < ia->z() ) ha(ix,iy) = *ia;
	}
	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
	  // int const ix = min(xsize,max(1,(int)ceil(ib->x()/BIN)-xlb));
	  // int const iy = min(ysize,max(1,(int)ceil(ib->y()/BIN)-ylb));
	  int const ix = (int)ceil(ib->x()/BIN)-xlb;
	  int const iy = (int)ceil(ib->y()/BIN)-ylb;
	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
	  if( hb(ix,iy).z() > ib->z() ) hb(ix,iy) = *ib;
	}
	
	// check hashes for min dis
	int imna=0,jmna=0,imnb=0,jmnb=0;
	Real mindis = 9e9;
	for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
	  for(int j = 1; j <= ysize; ++j) {
	 	 for(int k = -2; k <= 2; ++k) {
	 		 if(i+k < 1 || i+k > xsize) continue;
	 		 for(int l = -2; l <= 2; ++l) {
	 			 if(j+l < 1 || j+l > ysize) continue;
	 			 Real const xa = ha(i	,j	).x();
	 			 Real const ya = ha(i	,j	).y();
	 			 Real const xb = hb(i+k,j+l).x();
	 			 Real const yb = hb(i+k,j+l).y();
	 			 Real const d2 = (xa-xb)*(xa-xb) + (ya-yb)*(ya-yb);
	
	 			 if( d2 < BIN*BIN*4.0 ) {
	 				 Real dz = hb(i+k,j+l).z() - ha(i,j).z() - sqrt(BIN*BIN*4.0-d2);
	 				 if( dz < mindis ) {
	 					 mindis = dz;
	 					 imna = i;
	 					 jmna = j;
	 					 imnb = i+k;
	 					 jmnb = j+l;
	 				 }
	 			 }
	 		 }
	 	 }
	  }
	}
	cbcount = 0.0;
	for(vector1<Vec>::const_iterator ia = cba.begin(); ia != cba.end(); ++ia) {
	  for(vector1<Vec>::const_iterator ib = cbb.begin(); ib != cbb.end(); ++ib) {
	 	 if( ib->distance_squared( (*ia + (mindis*Vec(0,0,1)) ) ) < CONTACT_D2 ) {
	 		 cbcount += 1.0;
	 	 }
	  }
	}
	hbcount = 0.0;
	for(vector1<int>::const_iterator id = don.begin(); id != don.end(); ++id) {
		for(vector1<int>::const_iterator ia = acc.begin(); ia != acc.end(); ++ia) {		
			if( pb[*ia].distance_squared(pa[*id]+(mindis*Vec(0,0,1)) ) < HB_DIS2 ) {
				Vec const & acb = pb[*ia-1];
				Vec const & acc = pb[*ia  ];
				Vec const & don = pa[*id  ]+(mindis*Vec(0,0,1));
				if( (acc-acb).normalized().dot( (don-acc).normalized() ) > 0.0 ) hbcount+=1.0;
			}
			if( pb[*id].distance_squared(pa[*ia]+(mindis*Vec(0,0,1)) ) < HB_DIS2 ) {
				Vec const & acb = pa[*ia-1]+(mindis*Vec(0,0,1));
				Vec const & acc = pa[*ia  ]+(mindis*Vec(0,0,1));
				Vec const & don = pb[*id  ];
				if( (acc-acb).normalized().dot( (don-acc).normalized() ) > 0.0 ) hbcount+=1.0;
			}
		}
	}
	return mindis;
}


Real
sicsafe(
	vector1<Vec> const & pa,
	vector1<Vec> const & pb,
	vector1<Vec> const & cba,
	vector1<Vec> const & cbb,
	Real & cbcount
) {
	Real const CONTACT_D  = basic::options::option[basic::options::OptionKeys::cxdock::contact_dis]();
	Real const CLASH_D    = basic::options::option[basic::options::OptionKeys::cxdock::  clash_dis]();
	Real const CONTACT_D2 = sqr(CONTACT_D);
	Real const CLASH_D2   = sqr(CLASH_D);
	
	Real mindis = 9e9;
	int mni,mnj;
	// for(vector1<Vec>::const_iterator i = pa.begin(); i != pa.end(); ++i) {
	// for(vector1<Vec>::const_iterator j = pb.begin(); j != pb.end(); ++j) {
	for(int ii = 1; ii <= pa.size(); ++ii) {
		Vec const *i = &pa[ii];
		for(int jj = 1; jj <= pb.size(); ++jj) {		
			Vec const *j = &pb[jj];		

			Real const dxy2 = (i->x()-j->x())*(i->x()-j->x()) + (i->y()-j->y())*(i->y()-j->y());
			if( dxy2 >= CLASH_D2 ) continue;
			Real const dz = j->z() - i->z() - sqrt(CLASH_D2-dxy2);
			if( dz < mindis) {
				mindis = dz;
				mni = ii;
				mnj = jj;
			}
		}		
	}
	CONTACTS.insert(mni);
	CONTACTS.insert(mnj);	
	
	cbcount = 0.0;
	for(vector1<Vec>::const_iterator ia = cba.begin(); ia != cba.end(); ++ia) {
	  for(vector1<Vec>::const_iterator ib = cbb.begin(); ib != cbb.end(); ++ib) {
			Real d2 = ib->distance_squared( (*ia + (mindis*Vec(0,0,1)) ) );
			if( d2 < CONTACT_D2 ) {
				cbcount += sigmoid(d2, CLASH_D, CONTACT_D );
			}
	  }
	}
	
	return mindis;
}

// Real
// sicfast(
// 	vector1<Vec> const & pa,
// 	vector1<Vec> const & pb,
// 	vector1<Vec> const & cba,
// 	vector1<Vec> const & cbb,
// 	Real & cbcount
// ) {
// 	Real const CONTACT_D2 = sqr(basic::options::option[basic::options::OptionKeys::cxdock::contact_dis]());
// 	Real const CLASH_D2   = sqr(basic::options::option[basic::options::OptionKeys::cxdock::  clash_dis]());
// 	Real const BIN        =     basic::options::option[basic::options::OptionKeys::cxdock::  clash_dis]() /2.0;
// 
// 	// get bounds for plane hashes
// 	Real xmx1=-9e9,xmn1=9e9,ymx1=-9e9,ymn1=9e9,xmx=-9e9,xmn=9e9,ymx=-9e9,ymn=9e9;
// 	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 		xmx1 = max(xmx1,ia->x()); xmn1 = min(xmn1,ia->x());
// 		ymx1 = max(ymx1,ia->y()); ymn1 = min(ymn1,ia->y());
// 	}
// 	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 		xmx = max(xmx,ib->x()); xmn = min(xmn,ib->x());
// 		ymx = max(ymx,ib->y()); ymn = min(ymn,ib->y());
// 	}
// 	xmx = min(xmx,xmx1); xmn = max(xmn,xmn1);
// 	ymx = min(ymx,ymx1); ymn = max(ymn,ymn1); // bounds of grid
// 	
// 	
// 	int xlb = (int)floor(xmn/BIN)-2; int xub = (int)ceil(xmx/BIN)+2; // one extra on each side for correctness,
// 	int ylb = (int)floor(ymn/BIN)-2; int yub = (int)ceil(ymx/BIN)+2; // and one extra for outside atoms
// 	
// 	// insert points into hashes
// 	int const xsize = xub-xlb+1;
// 	int const ysize = yub-ylb+1;
// 	ObjexxFCL::FArray2D<Vec> ha(xsize,ysize,Vec(0,0,-9e9)),hb(xsize,ysize,Vec(0,0,9e9));
// 	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 	  int const ix = (int)ceil(ia->x()/BIN)-xlb;
// 	  int const iy = (int)ceil(ia->y()/BIN)-ylb;
// 	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 	  if( ha(ix,iy).z() < ia->z() ) ha(ix,iy) = *ia;
// 	}
// 	for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 	  int const ix = (int)ceil(ib->x()/BIN)-xlb;
// 	  int const iy = (int)ceil(ib->y()/BIN)-ylb;
// 	  if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 	  if( hb(ix,iy).z() > ib->z() ) hb(ix,iy) = *ib;
// 	}
// 	
// 	// check hashes for min dis
// 	int imna=0,jmna=0,imnb=0,jmnb=0;
// 	Real mindis = 9e9;
// 	for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 	  for(int j = 1; j <= ysize; ++j) {
// 	 	 for(int k = -2; k <= 2; ++k) {
// 	 		 if(i+k < 1 || i+k > xsize) continue;
// 	 		 for(int l = -2; l <= 2; ++l) {
// 	 			 if(j+l < 1 || j+l > ysize) continue;
// 	 			 Real const xa = ha(i	,j	).x();
// 	 			 Real const ya = ha(i	,j	).y();
// 	 			 Real const xb = hb(i+k,j+l).x();
// 	 			 Real const yb = hb(i+k,j+l).y();
// 	 			 Real const d2 = (xa-xb)*(xa-xb) + (ya-yb)*(ya-yb);
// 	
// 	 			 if( d2 < BIN*BIN*4.0 ) {
// 	 				 Real dz = hb(i+k,j+l).z() - ha(i,j).z() - sqrt(BIN*BIN*4.0-d2);
// 	 				 if( dz < mindis ) {
// 	 					 mindis = dz;
// 	 					 imna = i;
// 	 					 jmna = j;
// 	 					 imnb = i+k;
// 	 					 jmnb = j+l;
// 	 				 }
// 	 			 }
// 	 		 }
// 	 	 }
// 	  }
// 	}
// 	
// 	Real const CLASH_D = sqrt(CLASH_D2);
// 	Real const CONTACT_D = sqrt(CONTACT_D2);	
// 
// 	cbcount = 0.0;
// 	// utility::io::ozstream out("cb8.pdb");
// 	// TR << "CB0 " << cbcount << std::endl;
// 	for(vector1<Vec>::const_iterator ia = cba.begin(); ia != cba.end(); ++ia) {
// 	  for(vector1<Vec>::const_iterator ib = cbb.begin(); ib != cbb.end(); ++ib) {
// 			Real d2 = ib->distance_squared( (*ia + (mindis*Vec(0,0,1)) ) );
// 	 	 if( d2 < CONTACT_D2 ) {
// 			// CHANGE ME!
// 	 		 cbcount += sigmoid(d2, CLASH_D, CONTACT_D );
// //	 		 cbcount += sigmoid(d2, 0.0, 2*CONTACT_D );
// //			cbcount++;
// 	 		 // Vec viz = (*ia) + (mindis*ori);
// 	 		 // out<<"HETATM"<<I(5,1000)<<' '<<"VIZ "<<' ' <<	"VIZ"<<' '<<"A"<<I(4,100)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	 		 // viz = *ib;
// 	 		 // out<<"HETATM"<<I(5,1000)<<' '<<"VIZ "<<' ' <<	"VIZ"<<' '<<"B"<<I(4,100)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	 	 }
// 	  }
// 	}
// 	// out.close();
// 	// TR << "CB1 " << cbcount << std::endl;
// 	
// 	// // rotate points back -- needed iff pa/pb come by reference
// 	//rot = rot.transposed();
// 	// if( rot != Mat::identity() ) {
// 	//	for(vector1<Vec>::iterator ia = pa.begin(); ia != pa.end(); ++ia) *ia = rot*(*ia);
// 	//	for(vector1<Vec>::iterator ib = pb.begin(); ib != pb.end(); ++ib) *ib = rot*(*ib);
// 	// }
// 	
// 	// uncomment this to get hashes in local space
// 	// rot = Mat::identity();
// 	// ori = Vec(0,0,1);
// 	
// 	// if(debug){
// 	//	 {
// 	//		 utility::io::ozstream out("hasha.pdb");
// 	//		 for(int i = 2; i <= xsize-1; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 	//			 for(int j = 2; j <= ysize-1; ++j) {
// 	//				 Vec viz = rot*ha(i,j) + mindis*ori;
// 	//				 if(viz.z() < -9e8 || 9e8 < viz.z()) continue;
// 	//				 out<<"HETATM"<<I(5,1000+i)<<' '<<"VIZ "<<' ' << "VIZ"<<' '<<"B"<<I(4,100+j)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	//			 }
// 	//		 }
// 	//		 Vec viz = rot*ha(imna,jmna) + mindis*ori;
// 	//		 out<<"HETATM"<<I(5,1000+imna)<<' '<<"MIN "<<' ' <<	"MIN"<<' '<<"B"<<I(4,100+jmna)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	//		 out.close();
// 	//	 }
// 	//	 {
// 	//		 utility::io::ozstream out("hashb.pdb");
// 	//		 for(int i = 2; i <= xsize-1; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 	//			 for(int j = 2; j <= ysize-1; ++j) {
// 	//				 Vec viz = rot*hb(i,j);
// 	//				 if(viz.z() < -9e8 || 9e8 < viz.z()) continue;
// 	//				 out<<"HETATM"<<I(5,1000+i)<<' '<<"VIZ "<<' ' << "VIZ"<<' '<<"C"<<I(4,100+j)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	//			 }
// 	//		 }
// 	//		 Vec viz = rot*hb(imnb,jmnb);
// 	//		 out<<"HETATM"<<I(5,1000+imnb)<<' '<<"MIN "<<' ' <<	"MIN"<<' '<<"C"<<I(4,100+jmnb)<<"		"<<F(8,3,viz.x())<<F(8,3,viz.y())<<F(8,3,viz.z())<<F(6,2,1.0)<<F(6,2,1.0)<<'\n';
// 	//		 out.close();
// 	//	 }
// 	// }
// 	
// 	return mindis;
// }


Real
mindis(
	vector1<Vec> & pa,
	vector1<Vec> & pb,
	Real t
) {
	Real mndis2=9e9;
	for(vector1<Vec>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
		for(vector1<Vec>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
			Real d2 = ib->distance_squared( (*ia + (Vec(0,0,t)) ) );
			if( d2 < mndis2 ) {
				mndis2 = d2;
			}
		}
	}
	return sqrt(mndis2);
}


// struct SICFast  : public SICFastBase {
// 	ObjexxFCL::FArray2D<Vecf2> ha,hb;
// 	SICFast() : SICFastBase() {}
// 	virtual void fill_plane_hash(vector1<Vecf> & pa, vector1<Vecf> & pb) {
// 		xlb = (int)floor(xmn/BIN)-2; xub = (int)ceil(xmx/BIN)+2; // one extra on each side for correctness,
// 		ylb = (int)floor(ymn/BIN)-2; yub = (int)ceil(ymx/BIN)+2; // and one extra for outside atoms
// 		ha.dimension(xub-xlb+1,yub-ylb+1,Vecf2(Vecf(0,0,-9e9),Vecf(0,0,-9e9)));
// 		hb.dimension(xub-xlb+1,yub-ylb+1,Vecf2(Vecf(0,0, 9e9),Vecf(0,0, 9e9)));
// 		// insert points into hashes
// 		int const xsize = xub-xlb+1;
// 		int const ysize = yub-ylb+1;
// 		for(vector1<Vecf>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 			int const ix = (int)ceil(ia->x()/BIN)-xlb;
// 			int const iy = (int)ceil(ia->y()/BIN)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( ha(ix,iy).a.z() < ia->z() ) {
// 				ha(ix,iy).b = ha(ix,iy).a;
// 				ha(ix,iy).a = *ia;
// 			} else
// 			if( ha(ix,iy).b.z() < ia->z() ) {
// 				ha(ix,iy).b = *ia;			
// 			}
// 		}
// 		for(vector1<Vecf>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 			int const ix = (int)ceil(ib->x()/BIN)-xlb;
// 			int const iy = (int)ceil(ib->y()/BIN)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( hb(ix,iy).a.z() > ib->z() ) {
// 				hb(ix,iy).b = hb(ix,iy).a;
// 				hb(ix,iy).a = *ib;			
// 			} else 
// 			if( hb(ix,iy).b.z() > ib->z() ) {
// 				hb(ix,iy).b = *ib;
// 			}
// 		}
// 		
// 	}
// 	virtual double get_mindis_with_plane_hashes() {
// 		int const xsize=xub-xlb+1, ysize=yub-ylb+1;
// 		int imna=0,jmna=0,imnb=0,jmnb=0;
// 		double m = 9e9;
// 		for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 			for(int j = 1; j <= ysize; ++j) {
// 				for(int k = -2; k <= 2; ++k) {
// 					if(i+k < 1 || i+k > xsize) continue;
// 					for(int l = -2; l <= 2; ++l) {
// 						if(j+l < 1 || j+l > ysize) continue;
// 						double const xa1=ha(i,j).a.x(),ya1=ha(i,j).a.y(),xb1=hb(i+k,j+l).a.x(),yb1=hb(i+k,j+l).a.y(),d21=(xa1-xb1)*(xa1-xb1)+(ya1-yb1)*(ya1-yb1); 
// 						double const xa2=ha(i,j).a.x(),ya2=ha(i,j).a.y(),xb2=hb(i+k,j+l).b.x(),yb2=hb(i+k,j+l).b.y(),d22=(xa2-xb2)*(xa2-xb2)+(ya2-yb2)*(ya2-yb2); 
// 						double const xa3=ha(i,j).b.x(),ya3=ha(i,j).b.y(),xb3=hb(i+k,j+l).a.x(),yb3=hb(i+k,j+l).a.y(),d23=(xa3-xb3)*(xa3-xb3)+(ya3-yb3)*(ya3-yb3);
// 						double const xa4=ha(i,j).b.x(),ya4=ha(i,j).b.y(),xb4=hb(i+k,j+l).b.x(),yb4=hb(i+k,j+l).b.y(),d24=(xa4-xb4)*(xa4-xb4)+(ya4-yb4)*(ya4-yb4);
// 						if(d21<CLD2){ double const dz1=hb(i+k,j+l).a.z()-ha(i,j).a.z()-sqrt(CLD2-d21); if(dz1<m){ m=dz1; imna=i; jmna=j; imnb=i+k; jmnb=j+l; } }
// 						if(d22<CLD2){ double const dz2=hb(i+k,j+l).b.z()-ha(i,j).a.z()-sqrt(CLD2-d22); if(dz2<m){ m=dz2; imna=i; jmna=j; imnb=i+k; jmnb=j+l; } }
// 						if(d23<CLD2){ double const dz3=hb(i+k,j+l).a.z()-ha(i,j).b.z()-sqrt(CLD2-d23); if(dz3<m){ m=dz3; imna=i; jmna=j; imnb=i+k; jmnb=j+l; } }
// 						if(d24<CLD2){ double const dz4=hb(i+k,j+l).b.z()-ha(i,j).b.z()-sqrt(CLD2-d24); if(dz4<m){ m=dz4; imna=i; jmna=j; imnb=i+k; jmnb=j+l; } }
// 					}
// 				}
// 			}
// 		}
// 		return m;
// 	}
// };
// struct SICFast1 : public SICFastBase {
// 	ObjexxFCL::FArray2D<Vecf> ha,hb;
// 	SICFast1() : SICFastBase() {}
// 	virtual void fill_plane_hash(vector1<Vecf> & pa, vector1<Vecf> & pb) {
// 		xlb = (int)floor(xmn/CLD)-2; xub = (int)ceil(xmx/CLD)+2; // one extra on each side for correctness,
// 		ylb = (int)floor(ymn/CLD)-2; yub = (int)ceil(ymx/CLD)+2; // and one extra for outside atoms
// 		ha.dimension(xub-xlb+1,yub-ylb+1,Vecf(0,0,-9e9));
// 		hb.dimension(xub-xlb+1,yub-ylb+1,Vecf(0,0, 9e9));
// 		// insert points into hashes
// 		int const xsize = xub-xlb+1;
// 		int const ysize = yub-ylb+1;
// 		for(vector1<Vecf>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 			int const ix = (int)ceil(ia->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ia->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( ha(ix,iy).z() < ia->z() ) {
// 				ha(ix,iy) = *ia;	
// 			}
// 		}
// 		for(vector1<Vecf>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 			int const ix = (int)ceil(ib->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ib->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( hb(ix,iy).z() > ib->z() ) {
// 				hb(ix,iy) = *ib;
// 			}
// 		}
// 		
// 	}
// 	virtual double get_mindis_with_plane_hashes() {
// 		int const xsize=xub-xlb+1, ysize=yub-ylb+1;
// 		int imna=0,jmna=0,imnb=0,jmnb=0;
// 		double m = 9e9;
// 		for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 			for(int j = 1; j <= ysize; ++j) {
// 				for(int k = -1; k <= 1; ++k) {
// 					if(i+k < 1 || i+k > xsize) continue;
// 					for(int l = -1; l <= 1; ++l) {
// 						if(j+l < 1 || j+l > ysize) continue;
// 						double const xa1=ha(i,j).x(),ya1=ha(i,j).y(),xb1=hb(i+k,j+l).x(),yb1=hb(i+k,j+l).y(),d21=(xa1-xb1)*(xa1-xb1)+(ya1-yb1)*(ya1-yb1); 
// 						if(d21<CLD2){ double const dz=hb(i+k,j+l).z()-ha(i,j).z()-sqrt(CLD2-d21); if(dz<m) m=dz; }
// 					}
// 				}
// 			}
// 		}
// 		return m;
// 	}
// };
// struct SICFast2 : public SICFastBase {
// 	ObjexxFCL::FArray2D<Vecf2> ha,hb;
// 	SICFast2() : SICFastBase() {}
// 	virtual void fill_plane_hash(vector1<Vecf> & pa, vector1<Vecf> & pb) {
// 		xlb = (int)floor(xmn/CLD)-2; xub = (int)ceil(xmx/CLD)+2; // one extra on each side for correctness,
// 		ylb = (int)floor(ymn/CLD)-2; yub = (int)ceil(ymx/CLD)+2; // and one extra for outside atoms
// 		ha.dimension(xub-xlb+1,yub-ylb+1,Vecf2(Vecf(0,0,-9e9),Vecf(0,0,-9e9)));
// 		hb.dimension(xub-xlb+1,yub-ylb+1,Vecf2(Vecf(0,0, 9e9),Vecf(0,0, 9e9)));
// 		// insert points into hashes
// 		int const xsize = xub-xlb+1;
// 		int const ysize = yub-ylb+1;
// 		for(vector1<Vecf>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 			int const ix = (int)ceil(ia->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ia->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( ha(ix,iy).a.z() < ia->z() ) {
// 				ha(ix,iy).b = ha(ix,iy).a;
// 				ha(ix,iy).a = *ia;	
// 			} else if( ha(ix,iy).b.z() < ia->z() ) {
// 				ha(ix,iy).b = *ia;
// 			}
// 		}
// 		for(vector1<Vecf>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 			int const ix = (int)ceil(ib->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ib->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( hb(ix,iy).a.z() > ib->z() ) {
// 				hb(ix,iy).b = hb(ix,iy).a;
// 				hb(ix,iy).a = *ib;
// 			} else if( hb(ix,iy).b.z() > ib->z() ) {
// 				hb(ix,iy).b = *ib;
// 			}
// 		}
// 		
// 	}
// 	virtual double get_mindis_with_plane_hashes() {
// 		int const xsize=xub-xlb+1, ysize=yub-ylb+1;
// 		int imna=0,jmna=0,imnb=0,jmnb=0;
// 		double m = 9e9;
// 		for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 			for(int j = 1; j <= ysize; ++j) {
// 				for(int k = -1; k <= 1; ++k) {
// 					if(i+k < 1 || i+k > xsize) continue;
// 					for(int l = -1; l <= 1; ++l) {
// 						if(j+l < 1 || j+l > ysize) continue;
// 						double const xa1=ha(i,j).a.x(),ya1=ha(i,j).a.y(),xb1=hb(i+k,j+l).a.x(),yb1=hb(i+k,j+l).a.y(),d21=(xa1-xb1)*(xa1-xb1)+(ya1-yb1)*(ya1-yb1); 
// 						double const xa2=ha(i,j).a.x(),ya2=ha(i,j).a.y(),xb2=hb(i+k,j+l).b.x(),yb2=hb(i+k,j+l).b.y(),d22=(xa2-xb2)*(xa2-xb2)+(ya2-yb2)*(ya2-yb2); 
// 						double const xa3=ha(i,j).b.x(),ya3=ha(i,j).b.y(),xb3=hb(i+k,j+l).a.x(),yb3=hb(i+k,j+l).a.y(),d23=(xa3-xb3)*(xa3-xb3)+(ya3-yb3)*(ya3-yb3);
// 						double const xa4=ha(i,j).b.x(),ya4=ha(i,j).b.y(),xb4=hb(i+k,j+l).b.x(),yb4=hb(i+k,j+l).b.y(),d24=(xa4-xb4)*(xa4-xb4)+(ya4-yb4)*(ya4-yb4); 
// 						if(d21<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).a.z()-sqrt(CLD2-d21); if(dz<m) m=dz; }
// 						if(d22<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).a.z()-sqrt(CLD2-d22); if(dz<m) m=dz; }
// 						if(d23<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).b.z()-sqrt(CLD2-d23); if(dz<m) m=dz; }
// 						if(d24<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).b.z()-sqrt(CLD2-d24); if(dz<m) m=dz; }
// 					}
// 				}
// 			}
// 		}
// 		return m;
// 	}
// };
// struct SICFast3 : public SICFastBase {
// 	ObjexxFCL::FArray2D<Vecf3> ha,hb;
// 	SICFast3() : SICFastBase() {}
// 	virtual void fill_plane_hash(vector1<Vecf> & pa, vector1<Vecf> & pb) {
// 		xlb = (int)floor(xmn/CLD)-2; xub = (int)ceil(xmx/CLD)+2; // one extra on each side for correctness,
// 		ylb = (int)floor(ymn/CLD)-2; yub = (int)ceil(ymx/CLD)+2; // and one extra for outside atoms
// 		ha.dimension(xub-xlb+1,yub-ylb+1,Vecf3(Vecf(0,0,-9e9),Vecf(0,0,-9e9),Vecf(0,0,-9e9)));
// 		hb.dimension(xub-xlb+1,yub-ylb+1,Vecf3(Vecf(0,0, 9e9),Vecf(0,0, 9e9),Vecf(0,0, 9e9)));
// 		// insert points into hashes
// 		int const xsize = xub-xlb+1;
// 		int const ysize = yub-ylb+1;
// 		for(vector1<Vecf>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 			int const ix = (int)ceil(ia->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ia->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( ha(ix,iy).a.z() < ia->z() ) {
// 				ha(ix,iy).c = ha(ix,iy).b;
// 				ha(ix,iy).b = ha(ix,iy).a;
// 				ha(ix,iy).a = *ia;
// 			} else if( ha(ix,iy).b.z() < ia->z() ) {
// 				ha(ix,iy).c = ha(ix,iy).b;
// 				ha(ix,iy).b = *ia;	
// 			} else if( ha(ix,iy).c.z() < ia->z() ) {
// 				ha(ix,iy).c = *ia;	
// 			}
// 		}
// 		for(vector1<Vecf>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 			int const ix = (int)ceil(ib->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ib->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( hb(ix,iy).a.z() > ib->z() ) {
// 				hb(ix,iy).c = hb(ix,iy).b;
// 				hb(ix,iy).b = hb(ix,iy).a;
// 				hb(ix,iy).a = *ib;			
// 			} else if( hb(ix,iy).b.z() > ib->z() ) {
// 				hb(ix,iy).c = hb(ix,iy).b;
// 				hb(ix,iy).b = *ib;
// 			} else if( hb(ix,iy).c.z() > ib->z() ) {
// 				hb(ix,iy).c = *ib;
// 			}
// 		}
// 		
// 	}
// 	virtual double get_mindis_with_plane_hashes() {
// 		int const xsize=xub-xlb+1, ysize=yub-ylb+1;
// 		int imna=0,jmna=0,imnb=0,jmnb=0;
// 		double m = 9e9;
// 		for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 			for(int j = 1; j <= ysize; ++j) {
// 				for(int k = -1; k <= 1; ++k) {
// 					if(i+k < 1 || i+k > xsize) continue;
// 					for(int l = -1; l <= 1; ++l) {
// 						if(j+l < 1 || j+l > ysize) continue;
// 						double const xa1=ha(i,j).a.x(),ya1=ha(i,j).a.y(),xb1=hb(i+k,j+l).a.x(),yb1=hb(i+k,j+l).a.y(),d21=(xa1-xb1)*(xa1-xb1)+(ya1-yb1)*(ya1-yb1); 
// 						double const xa2=ha(i,j).a.x(),ya2=ha(i,j).a.y(),xb2=hb(i+k,j+l).b.x(),yb2=hb(i+k,j+l).b.y(),d22=(xa2-xb2)*(xa2-xb2)+(ya2-yb2)*(ya2-yb2); 
// 						double const xa3=ha(i,j).a.x(),ya3=ha(i,j).a.y(),xb3=hb(i+k,j+l).c.x(),yb3=hb(i+k,j+l).c.y(),d23=(xa3-xb3)*(xa3-xb3)+(ya3-yb3)*(ya3-yb3);
// 						double const xa4=ha(i,j).b.x(),ya4=ha(i,j).b.y(),xb4=hb(i+k,j+l).a.x(),yb4=hb(i+k,j+l).a.y(),d24=(xa4-xb4)*(xa4-xb4)+(ya4-yb4)*(ya4-yb4); 
// 						double const xa5=ha(i,j).b.x(),ya5=ha(i,j).b.y(),xb5=hb(i+k,j+l).b.x(),yb5=hb(i+k,j+l).b.y(),d25=(xa5-xb5)*(xa5-xb5)+(ya5-yb5)*(ya5-yb5); 
// 						double const xa6=ha(i,j).b.x(),ya6=ha(i,j).b.y(),xb6=hb(i+k,j+l).c.x(),yb6=hb(i+k,j+l).c.y(),d26=(xa6-xb6)*(xa6-xb6)+(ya6-yb6)*(ya6-yb6);
// 						double const xa7=ha(i,j).c.x(),ya7=ha(i,j).c.y(),xb7=hb(i+k,j+l).a.x(),yb7=hb(i+k,j+l).a.y(),d27=(xa7-xb7)*(xa7-xb7)+(ya7-yb7)*(ya7-yb7); 
// 						double const xa8=ha(i,j).c.x(),ya8=ha(i,j).c.y(),xb8=hb(i+k,j+l).b.x(),yb8=hb(i+k,j+l).b.y(),d28=(xa8-xb8)*(xa8-xb8)+(ya8-yb8)*(ya8-yb8); 
// 						double const xa9=ha(i,j).c.x(),ya9=ha(i,j).c.y(),xb9=hb(i+k,j+l).c.x(),yb9=hb(i+k,j+l).c.y(),d29=(xa9-xb9)*(xa9-xb9)+(ya9-yb9)*(ya9-yb9);
// 						if(d21<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).a.z()-sqrt(CLD2-d21); if(dz<m) m=dz; }
// 						if(d22<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).a.z()-sqrt(CLD2-d22); if(dz<m) m=dz; }
// 						if(d23<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).a.z()-sqrt(CLD2-d23); if(dz<m) m=dz; }
// 						if(d24<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).b.z()-sqrt(CLD2-d24); if(dz<m) m=dz; }
// 						if(d25<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).b.z()-sqrt(CLD2-d25); if(dz<m) m=dz; }
// 						if(d26<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).b.z()-sqrt(CLD2-d26); if(dz<m) m=dz; }
// 						if(d27<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).c.z()-sqrt(CLD2-d27); if(dz<m) m=dz; }
// 						if(d28<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).c.z()-sqrt(CLD2-d28); if(dz<m) m=dz; }
// 						if(d29<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).c.z()-sqrt(CLD2-d29); if(dz<m) m=dz; }
// 					}
// 				}
// 			}
// 		}
// 		return m;
// 	}
// };
// struct SICFast4 : public SICFastBase {
// 	ObjexxFCL::FArray2D<Vecf4> ha,hb;
// 	SICFast4() : SICFastBase() {}
// 	virtual void fill_plane_hash(vector1<Vecf> & pa, vector1<Vecf> & pb) {
// 		xlb = (int)floor(xmn/CLD)-2; xub = (int)ceil(xmx/CLD)+2; // one extra on each side for correctness,
// 		ylb = (int)floor(ymn/CLD)-2; yub = (int)ceil(ymx/CLD)+2; // and one extra for outside atoms
// 		ha.dimension(xub-xlb+1,yub-ylb+1,Vecf4(Vecf(0,0,-9e9),Vecf(0,0,-9e9),Vecf(0,0,-9e9),Vecf(0,0,-9e9)));
// 		hb.dimension(xub-xlb+1,yub-ylb+1,Vecf4(Vecf(0,0, 9e9),Vecf(0,0, 9e9),Vecf(0,0, 9e9),Vecf(0,0, 9e9)));
// 		// insert points into hashes
// 		int const xsize = xub-xlb+1;
// 		int const ysize = yub-ylb+1;
// 		for(vector1<Vecf>::const_iterator ia = pa.begin(); ia != pa.end(); ++ia) {
// 			int const ix = (int)ceil(ia->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ia->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( ha(ix,iy).a.z() < ia->z() ) {
// 				ha(ix,iy).d = ha(ix,iy).c;
// 				ha(ix,iy).c = ha(ix,iy).b;
// 				ha(ix,iy).b = ha(ix,iy).a;
// 				ha(ix,iy).a = *ia;
// 			} else if( ha(ix,iy).b.z() < ia->z() ) {
// 				ha(ix,iy).d = ha(ix,iy).c;
// 				ha(ix,iy).c = ha(ix,iy).b;
// 				ha(ix,iy).b = *ia;	
// 			} else if( ha(ix,iy).c.z() < ia->z() ) {
// 				ha(ix,iy).d = ha(ix,iy).c;
// 				ha(ix,iy).c = *ia;	
// 			} else if( ha(ix,iy).d.z() < ia->z() ) {
// 				ha(ix,iy).d = *ia;	
// 			}
// 		}
// 		for(vector1<Vecf>::const_iterator ib = pb.begin(); ib != pb.end(); ++ib) {
// 			int const ix = (int)ceil(ib->x()/CLD)-xlb;
// 			int const iy = (int)ceil(ib->y()/CLD)-ylb;
// 			if( ix < 1 || ix > xsize || iy < 1 || iy > ysize ) continue;
// 			if( hb(ix,iy).a.z() > ib->z() ) {
// 				hb(ix,iy).d = hb(ix,iy).c;
// 				hb(ix,iy).c = hb(ix,iy).b;
// 				hb(ix,iy).b = hb(ix,iy).a;
// 				hb(ix,iy).a = *ib;			
// 			} else if( hb(ix,iy).b.z() > ib->z() ) {
// 				hb(ix,iy).d = hb(ix,iy).c;
// 				hb(ix,iy).c = hb(ix,iy).b;
// 				hb(ix,iy).b = *ib;
// 			} else if( hb(ix,iy).c.z() > ib->z() ) {
// 				hb(ix,iy).d = hb(ix,iy).c;
// 				hb(ix,iy).c = *ib;
// 			} else if( hb(ix,iy).d.z() > ib->z() ) {
// 				hb(ix,iy).d = *ib;
// 			}
// 		}
// 		
// 	}
// 	virtual double get_mindis_with_plane_hashes() {
// 		int const xsize=xub-xlb+1, ysize=yub-ylb+1;
// 		int imna=0,jmna=0,imnb=0,jmnb=0;
// 		double m = 9e9;
// 		for(int i = 1; i <= xsize; ++i) { // skip 1 and N because they contain outside atoms (faster than clashcheck?)
// 			for(int j = 1; j <= ysize; ++j) {
// 				for(int k = -1; k <= 1; ++k) {
// 					if(i+k < 1 || i+k > xsize) continue;
// 					for(int l = -1; l <= 1; ++l) {
// 						if(j+l < 1 || j+l > ysize) continue;
// 						double const xa1=ha(i,j).a.x(),ya1=ha(i,j).a.y(),xb1=hb(i+k,j+l).a.x(),yb1=hb(i+k,j+l).a.y(),d21=(xa1-xb1)*(xa1-xb1)+(ya1-yb1)*(ya1-yb1); 
// 						double const xa2=ha(i,j).a.x(),ya2=ha(i,j).a.y(),xb2=hb(i+k,j+l).b.x(),yb2=hb(i+k,j+l).b.y(),d22=(xa2-xb2)*(xa2-xb2)+(ya2-yb2)*(ya2-yb2); 
// 						double const xa3=ha(i,j).a.x(),ya3=ha(i,j).a.y(),xb3=hb(i+k,j+l).c.x(),yb3=hb(i+k,j+l).c.y(),d23=(xa3-xb3)*(xa3-xb3)+(ya3-yb3)*(ya3-yb3);
// 						double const xa4=ha(i,j).a.x(),ya4=ha(i,j).a.y(),xb4=hb(i+k,j+l).d.x(),yb4=hb(i+k,j+l).d.y(),d24=(xa4-xb4)*(xa4-xb4)+(ya4-yb4)*(ya4-yb4); 
// 						double const xa5=ha(i,j).b.x(),ya5=ha(i,j).b.y(),xb5=hb(i+k,j+l).a.x(),yb5=hb(i+k,j+l).a.y(),d25=(xa5-xb5)*(xa5-xb5)+(ya5-yb5)*(ya5-yb5); 
// 						double const xa6=ha(i,j).b.x(),ya6=ha(i,j).b.y(),xb6=hb(i+k,j+l).b.x(),yb6=hb(i+k,j+l).b.y(),d26=(xa6-xb6)*(xa6-xb6)+(ya6-yb6)*(ya6-yb6); 
// 						double const xa7=ha(i,j).b.x(),ya7=ha(i,j).b.y(),xb7=hb(i+k,j+l).c.x(),yb7=hb(i+k,j+l).c.y(),d27=(xa7-xb7)*(xa7-xb7)+(ya7-yb7)*(ya7-yb7);
// 						double const xa8=ha(i,j).b.x(),ya8=ha(i,j).b.y(),xb8=hb(i+k,j+l).d.x(),yb8=hb(i+k,j+l).d.y(),d28=(xa8-xb8)*(xa8-xb8)+(ya8-yb8)*(ya8-yb8); 
// 						double const xa9=ha(i,j).c.x(),ya9=ha(i,j).c.y(),xb9=hb(i+k,j+l).a.x(),yb9=hb(i+k,j+l).a.y(),d29=(xa9-xb9)*(xa9-xb9)+(ya9-yb9)*(ya9-yb9); 
// 						double const xa0=ha(i,j).c.x(),ya0=ha(i,j).c.y(),xb0=hb(i+k,j+l).b.x(),yb0=hb(i+k,j+l).b.y(),d20=(xa0-xb0)*(xa0-xb0)+(ya0-yb0)*(ya0-yb0); 
// 						double const xaa=ha(i,j).c.x(),yaa=ha(i,j).c.y(),xba=hb(i+k,j+l).c.x(),yba=hb(i+k,j+l).c.y(),d2a=(xaa-xba)*(xaa-xba)+(yaa-yba)*(yaa-yba);
// 						double const xab=ha(i,j).c.x(),yab=ha(i,j).c.y(),xbb=hb(i+k,j+l).d.x(),ybb=hb(i+k,j+l).d.y(),d2b=(xab-xbb)*(xab-xbb)+(yab-ybb)*(yab-ybb); 
// 						double const xac=ha(i,j).d.x(),yac=ha(i,j).d.y(),xbc=hb(i+k,j+l).a.x(),ybc=hb(i+k,j+l).a.y(),d2c=(xac-xbc)*(xac-xbc)+(yac-ybc)*(yac-ybc); 
// 						double const xad=ha(i,j).d.x(),yad=ha(i,j).d.y(),xbd=hb(i+k,j+l).b.x(),ybd=hb(i+k,j+l).b.y(),d2d=(xad-xbd)*(xad-xbd)+(yad-ybd)*(yad-ybd); 
// 						double const xae=ha(i,j).d.x(),yae=ha(i,j).d.y(),xbe=hb(i+k,j+l).c.x(),ybe=hb(i+k,j+l).c.y(),d2e=(xae-xbe)*(xae-xbe)+(yae-ybe)*(yae-ybe);
// 						double const xaf=ha(i,j).d.x(),yaf=ha(i,j).d.y(),xbf=hb(i+k,j+l).d.x(),ybf=hb(i+k,j+l).d.y(),d2f=(xaf-xbf)*(xaf-xbf)+(yaf-ybf)*(yaf-ybf); 
// 						if(d21<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).a.z()-sqrt(CLD2-d21); if(dz<m) m=dz; }
// 						if(d22<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).a.z()-sqrt(CLD2-d22); if(dz<m) m=dz; }
// 						if(d23<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).a.z()-sqrt(CLD2-d23); if(dz<m) m=dz; }
// 						if(d24<CLD2){ double const dz=hb(i+k,j+l).d.z()-ha(i,j).a.z()-sqrt(CLD2-d24); if(dz<m) m=dz; }
// 						if(d25<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).b.z()-sqrt(CLD2-d25); if(dz<m) m=dz; }
// 						if(d26<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).b.z()-sqrt(CLD2-d26); if(dz<m) m=dz; }
// 						if(d27<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).b.z()-sqrt(CLD2-d27); if(dz<m) m=dz; }
// 						if(d28<CLD2){ double const dz=hb(i+k,j+l).d.z()-ha(i,j).b.z()-sqrt(CLD2-d28); if(dz<m) m=dz; }
// 						if(d29<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).c.z()-sqrt(CLD2-d29); if(dz<m) m=dz; }
// 						if(d20<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).c.z()-sqrt(CLD2-d20); if(dz<m) m=dz; }
// 						if(d2a<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).c.z()-sqrt(CLD2-d2a); if(dz<m) m=dz; }
// 						if(d2b<CLD2){ double const dz=hb(i+k,j+l).d.z()-ha(i,j).c.z()-sqrt(CLD2-d2b); if(dz<m) m=dz; }
// 						if(d2c<CLD2){ double const dz=hb(i+k,j+l).a.z()-ha(i,j).d.z()-sqrt(CLD2-d2c); if(dz<m) m=dz; }
// 						if(d2d<CLD2){ double const dz=hb(i+k,j+l).b.z()-ha(i,j).d.z()-sqrt(CLD2-d2d); if(dz<m) m=dz; }
// 						if(d2e<CLD2){ double const dz=hb(i+k,j+l).c.z()-ha(i,j).d.z()-sqrt(CLD2-d2e); if(dz<m) m=dz; }
// 						if(d2f<CLD2){ double const dz=hb(i+k,j+l).d.z()-ha(i,j).d.z()-sqrt(CLD2-d2f); if(dz<m) m=dz; }
// 					}
// 				}
// 			}
// 		}
// 		return m;
// 	}
// };
