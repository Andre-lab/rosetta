The SC calculation code contains support for GPU-acceleration by
CUDA-capable devices, which provides a 10-25x speed up over the
CPU-only code using a regular desktop video card with 4 processors
(32 cores) and 50-100x speed up on fancier cards such as the
GeForce GTX580.

See also: http://www.doe-mbi.ucla.edu/people/luki/sc

COMPILING WITH GPU SUPPORT:
===========================

Follow these manual steps until we can get teach scons and/or cmake about nvcc.

1) Compile with SC_CUDA_GPU defined
The easiest may be to just uncomment the #define CUDA_GPU in
ShapeComplementarityCalculator.hh. If you feel confident, then you can also use
the compiler flag -DCUDA_GPU on select files.
At the very least you need to compile ShapeComplementarityCalculator.cc and your
application. If you get Segmentation Faults, then there is a structure mismatch;
recompile all.


2) Compile ShapeComplementarityCalculator_GPUKernels.cu file with nvcc

nvcc -D CUDA_GPU -o \
build/src/release/linux/2.6/64/x86/gcc/core/scoring/sc/ShapeComplementarityCalculator_GPUKernels.os \
-c src/core/scoring/sc/ShapeComplementarityCalculator_GPUKernels.cu -Xcompiler -fPIC


3) When compiling ShapeComplementarityCalculator.cc, you will need to provide
the path to the CUDA includes to g++ for cuda_runtime_api.h.

g++ -o build/src/release/linux/2.6/64/x86/gcc/core/scoring/sc/ShapeComplementarityCalculator.os
[...]
-I/usr/local/cuda/include/


4) Add to the core.3.so linking stage:

build/src/release/linux/2.6/64/x86/gcc/core/scoring/sc/ShapeComplementarityCalculator_GPUKernels.os
-L/usr/local/cuda/lib64/ -lcudart


All set! You will need the CUDA runtime .so files during execution.


EXAMPLE:
===========================

core.init: Mini-Rosetta version 42832M from https://svn.rosettacommons.org/source/trunk/mini
core.init: command: bin/sc.default.linuxgccrelease -database ../minirosetta_database/ -s 2g38.pdb -sc:verbose
[...]
Structure 1:
core.scoring.sc.ShapeComplementarityCalculator: GPU support enabled: GeForce GTX 580 [1594 MHz, capability 2.0] with 16 multi processors, 1024 threads.
core.scoring.sc.ShapeComplementarityCalculator: Generating molecular surface, 15 dots/A^2
core.scoring.sc.ShapeComplementarityCalculator:            Convex dots: 32212
core.scoring.sc.ShapeComplementarityCalculator:          Toroidal dots: 38803
core.scoring.sc.ShapeComplementarityCalculator:           Concave dots: 37168
core.scoring.sc.ShapeComplementarityCalculator: Total surface dots (1): 48387
core.scoring.sc.ShapeComplementarityCalculator: Total surface dots (2): 59796
core.scoring.sc.ShapeComplementarityCalculator:     Total surface dots: 108183
core.scoring.sc.ShapeComplementarityCalculator: Trimming peripheral band, 1.5A range
core.scoring.sc.ShapeComplementarityCalculator: Peripheral trimming GPU processing time: 60 ms
core.scoring.sc.ShapeComplementarityCalculator: Peripheral trimming GPU processing time: 40 ms
core.scoring.sc.ShapeComplementarityCalculator: Computing surface separation and vectors
core.scoring.sc.ShapeComplementarityCalculator: Find Neighbors GPU processing time: 10 ms
core.scoring.sc.ShapeComplementarityCalculator: Find Neighbors GPU processing time: 10 ms
[...]
==================================================
Shape Complementarity: 0.691268
==================================================
real    0m3.426s
user    0m2.415s
sys     0m0.665s


Without GPU:

core.init: Mini-Rosetta version 42832M from https://svn.rosettacommons.org/source/trunk/mini
core.init: command: bin/sc.default.linuxgccrelease -database ../minirosetta_database/ -s 2g38.pdb -sc:verbose -sc:gpu 0
[...]
==================================================
Shape Complementarity: 0.691268
==================================================

real    0m28.394s
user    0m27.976s
sys     0m0.205s


Execution on a host without a GPU will fall back to CPU-processing with this message:
core.scoring.sc.ShapeComplementarityCalculator: CUDA Exception at src/core/scoring/sc/ShapeComplementarityCalculator.cc:1581: CUDA driver version is insufficient for CUDA runtime version
